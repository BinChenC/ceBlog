2020-05-10 08:51:03.947 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 18400 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 08:51:03.952 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 08:51:04.167 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 08:51:04.167 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 08:51:04.168 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 08:51:07.326 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 08:51:07.327 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 08:51:07.427 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 08:51:07.430 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 08:51:07.432 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 08:51:07.434 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 08:51:07.435 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 08:51:07.436 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 92ms. Found 0 JDBC repository interfaces.
2020-05-10 08:51:07.447 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 08:51:07.447 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 08:51:07.638 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 152ms. Found 5 JPA repository interfaces.
2020-05-10 08:51:07.713 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 08:51:07.714 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 08:51:07.748 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 08:51:07.749 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 08:51:07.749 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 08:51:07.749 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 08:51:07.750 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 08:51:07.750 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 08:51:08.968 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$4250d960] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 08:51:09.964 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 08:51:09.984 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 08:51:09.986 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 08:51:09.986 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 08:51:10.134 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 08:51:10.134 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 5966 ms
2020-05-10 08:51:10.578 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 08:51:10.776 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 08:51:11.299 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 08:51:11.534 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 08:51:13.165 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 08:51:13.255 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 08:51:15.090 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 08:51:15.097 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 08:51:15.144 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 08:51:20.473 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 08:51:23.654 [restartedMain] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: e174b959-49a4-43dd-9dc4-9c0d7dd60985

2020-05-10 08:51:25.515 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@69289b3c, org.springframework.security.web.context.SecurityContextPersistenceFilter@3eada342, org.springframework.security.web.header.HeaderWriterFilter@72249d8, org.springframework.security.web.csrf.CsrfFilter@78e64747, org.springframework.security.web.authentication.logout.LogoutFilter@6675f8e4, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@564a3320, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@72c4c47b, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@4b240b43, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@30551399, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@649e8540, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@464af63d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@79569666, org.springframework.security.web.session.SessionManagementFilter@2cba7f2b, org.springframework.security.web.access.ExceptionTranslationFilter@1d2139ef, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@60492119]
2020-05-10 08:51:25.800 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 08:51:25.878 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 08:51:25.881 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 23.929 seconds (JVM running for 27.71)
2020-05-10 08:53:52.243 [http-nio-8080-exec-9] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 08:53:52.244 [http-nio-8080-exec-9] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 08:53:52.264 [http-nio-8080-exec-9] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 20 ms
2020-05-10 08:56:42.509 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 13672 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 08:56:42.512 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 08:56:42.602 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 08:56:42.602 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 08:56:42.602 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 08:56:43.609 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 08:56:43.609 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 08:56:43.664 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 08:56:43.666 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 08:56:43.667 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 08:56:43.669 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 08:56:43.670 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 08:56:43.671 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 56ms. Found 0 JDBC repository interfaces.
2020-05-10 08:56:43.682 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 08:56:43.682 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 08:56:43.757 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 70ms. Found 5 JPA repository interfaces.
2020-05-10 08:56:43.771 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 08:56:43.772 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 08:56:43.793 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 08:56:43.794 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 08:56:43.794 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 08:56:43.794 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 08:56:43.794 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 08:56:43.796 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-05-10 08:56:44.404 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$7f49ff0f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 08:56:45.094 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 08:56:45.104 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 08:56:45.105 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 08:56:45.105 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 08:56:45.232 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 08:56:45.232 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2630 ms
2020-05-10 08:56:45.574 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 08:56:45.835 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 08:56:46.336 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 08:56:46.566 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 08:56:47.365 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 08:56:47.441 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 08:56:49.238 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 08:56:49.245 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 08:56:49.283 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 08:56:50.965 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 08:56:51.717 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 08:56:51.755 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 08:56:51.758 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 10.188 seconds (JVM running for 12.116)
2020-05-10 08:56:59.039 [http-nio-8080-exec-3] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 08:56:59.040 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 08:56:59.067 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 27 ms
2020-05-10 08:56:59.132 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classify', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.typeAll', args=[]}
2020-05-10 08:56:59.140 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 08:56:59.141 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classifyBlog/2/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.findBlogByTypeId', args=[2, 0, 5]}
2020-05-10 08:56:59.384 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 08:56:59.412 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 08:56:59.366 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 08:57:04.274 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 08:57:04.274 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 08:57:04.274 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 08:57:04.275 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 08:57:04.287 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 08:57:04.293 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 08:57:04.366 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 08:57:04.365 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 11:54:28.711 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 16888 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 11:54:28.729 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 11:54:28.844 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 11:54:28.844 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 11:54:28.844 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 11:54:32.930 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 11:54:32.931 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 11:54:33.059 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 11:54:33.061 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 11:54:33.063 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 11:54:33.064 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 11:54:33.066 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 11:54:33.066 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 115ms. Found 0 JDBC repository interfaces.
2020-05-10 11:54:33.079 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 11:54:33.079 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 11:54:33.271 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 156ms. Found 5 JPA repository interfaces.
2020-05-10 11:54:33.375 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 11:54:33.376 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 11:54:33.558 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 11:54:33.558 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 11:54:33.559 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 11:54:33.559 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 11:54:33.559 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 11:54:33.559 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 11:54:35.083 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$7748b2ba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 11:54:36.091 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 11:54:36.101 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 11:54:36.102 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 11:54:36.103 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 11:54:36.274 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 11:54:36.275 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 7431 ms
2020-05-10 11:54:36.739 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 11:54:36.992 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 11:54:37.569 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 11:54:38.116 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 11:54:39.080 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 11:54:39.161 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 11:54:41.018 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 11:54:41.025 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 11:54:41.084 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 11:54:44.201 [restartedMain] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 0bb57b2a-a106-4c49-8d1d-28186d4d5bd7

2020-05-10 11:54:44.457 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 11:54:44.483 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2020-05-10 11:54:44.566 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2020-05-10 11:54:44.568 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2020-05-10 11:54:44.580 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-10 11:59:01.299 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 26828 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 11:59:01.303 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 11:59:01.389 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 11:59:01.395 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 11:59:01.396 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 11:59:02.220 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 11:59:02.221 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 11:59:02.310 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 11:59:02.313 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 11:59:02.315 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 11:59:02.316 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 11:59:02.318 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 11:59:02.319 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 93ms. Found 0 JDBC repository interfaces.
2020-05-10 11:59:02.328 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 11:59:02.329 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 11:59:02.397 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 62ms. Found 5 JPA repository interfaces.
2020-05-10 11:59:02.414 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 11:59:02.416 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 11:59:02.441 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 11:59:02.442 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 11:59:02.442 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 11:59:02.442 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 11:59:02.443 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 11:59:02.443 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19ms. Found 0 Redis repository interfaces.
2020-05-10 11:59:02.834 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$1dadbdcd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 11:59:03.173 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 11:59:03.184 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 11:59:03.184 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 11:59:03.185 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 11:59:03.390 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 11:59:03.390 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1994 ms
2020-05-10 11:59:03.579 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 11:59:03.653 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 11:59:03.775 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 11:59:03.878 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 11:59:04.481 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 11:59:04.504 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 11:59:05.488 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 11:59:05.497 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 11:59:05.515 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 11:59:05.864 [restartedMain] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 6f8d1f2e-5e92-4e15-88c9-e8faba2a5615

2020-05-10 11:59:05.966 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 11:59:05.970 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2020-05-10 11:59:05.981 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2020-05-10 11:59:05.983 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2020-05-10 11:59:05.995 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-10 12:13:29.276 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 28600 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 12:13:29.279 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 12:13:29.391 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 12:13:29.393 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 12:13:29.393 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 12:13:30.247 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:13:30.248 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 12:13:30.293 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:13:30.295 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:13:30.296 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:13:30.297 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:13:30.299 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:13:30.300 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 47ms. Found 0 JDBC repository interfaces.
2020-05-10 12:13:30.309 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:13:30.310 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 12:13:30.373 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 59ms. Found 5 JPA repository interfaces.
2020-05-10 12:13:30.386 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:13:30.387 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 12:13:30.407 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:13:30.407 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:13:30.407 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:13:30.408 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:13:30.408 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:13:30.408 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 12:13:30.849 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$e5b7a827] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 12:13:31.320 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 12:13:31.329 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 12:13:31.331 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 12:13:31.331 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 12:13:31.457 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 12:13:31.457 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2064 ms
2020-05-10 12:13:31.678 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 12:13:31.750 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 12:13:31.878 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 12:13:31.989 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 12:13:32.592 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 12:13:32.612 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 12:13:33.505 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 12:13:33.512 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 12:13:33.538 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 12:13:35.298 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 12:13:36.310 [restartedMain] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: bb4856eb-9132-4d85-af33-bc7578efdd3e

2020-05-10 12:13:36.509 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@15bffbf8, org.springframework.security.web.context.SecurityContextPersistenceFilter@3a0193d2, org.springframework.security.web.header.HeaderWriterFilter@4a84c99c, org.springframework.security.web.csrf.CsrfFilter@176ee7df, org.springframework.security.web.authentication.logout.LogoutFilter@3daa983, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@51bf3e7c, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@708bb463, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@69cf939d, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@ad980c5, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3875b210, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5cda8e29, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@18a2d56d, org.springframework.security.web.session.SessionManagementFilter@72b0f705, org.springframework.security.web.access.ExceptionTranslationFilter@6519e8fd, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@602910a1]
2020-05-10 12:13:36.628 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 12:13:36.685 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 12:13:36.687 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 8.049 seconds (JVM running for 9.107)
2020-05-10 12:16:02.769 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 27184 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 12:16:02.772 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 12:16:02.903 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 12:16:02.903 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 12:16:02.904 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 12:16:03.753 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:16:03.753 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 12:16:03.808 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:16:03.810 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:16:03.812 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:16:03.813 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:16:03.816 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:16:03.816 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 58ms. Found 0 JDBC repository interfaces.
2020-05-10 12:16:03.827 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:16:03.827 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 12:16:03.904 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 72ms. Found 5 JPA repository interfaces.
2020-05-10 12:16:03.921 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:16:03.922 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 12:16:03.944 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:16:03.944 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:16:03.944 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:16:03.945 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:16:03.945 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:16:03.945 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-05-10 12:16:04.398 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$93a80647] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 12:16:04.869 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 12:16:04.879 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 12:16:04.880 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 12:16:04.880 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 12:16:05.009 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 12:16:05.009 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2105 ms
2020-05-10 12:16:05.242 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 12:16:05.309 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 12:16:05.439 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 12:16:05.537 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 12:16:06.115 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 12:16:06.135 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 12:16:07.078 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 12:16:07.086 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 12:16:07.116 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 12:16:08.489 [restartedMain] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 0c15eebc-ee83-4085-9e81-8aeecb09ea52

2020-05-10 12:16:08.593 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 12:16:08.597 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2020-05-10 12:16:08.606 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2020-05-10 12:16:08.608 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2020-05-10 12:16:08.619 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-10 12:16:19.043 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 31572 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 12:16:19.046 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 12:16:19.136 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 12:16:19.137 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 12:16:19.137 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 12:16:19.928 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:16:19.929 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 12:16:19.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:16:19.994 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:16:19.995 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:16:19.997 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:16:19.998 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:16:19.999 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 64ms. Found 0 JDBC repository interfaces.
2020-05-10 12:16:20.008 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:16:20.008 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 12:16:20.072 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 60ms. Found 5 JPA repository interfaces.
2020-05-10 12:16:20.086 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:16:20.088 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 12:16:20.107 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:16:20.107 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:16:20.107 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:16:20.108 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:16:20.108 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:16:20.108 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 12:16:20.533 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$a1f2efbb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 12:16:21.012 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 12:16:21.021 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 12:16:21.022 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 12:16:21.022 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 12:16:21.159 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 12:16:21.159 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2022 ms
2020-05-10 12:16:21.387 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 12:16:21.459 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 12:16:21.587 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 12:16:21.681 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 12:16:22.274 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 12:16:22.294 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 12:16:23.213 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 12:16:23.219 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 12:16:23.249 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 12:16:24.565 [restartedMain] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 62d52968-aaa5-43b6-82d4-29e68b73d2b4

2020-05-10 12:16:24.664 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 12:16:24.669 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2020-05-10 12:16:24.679 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2020-05-10 12:16:24.681 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2020-05-10 12:16:24.691 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-10 12:18:42.077 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 31040 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 12:18:42.079 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 12:18:42.129 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 12:18:42.129 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 12:18:42.129 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 12:18:43.038 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:18:43.039 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 12:18:43.098 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:18:43.101 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:18:43.102 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:18:43.104 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:18:43.105 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:18:43.106 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 61ms. Found 0 JDBC repository interfaces.
2020-05-10 12:18:43.118 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:18:43.119 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 12:18:43.187 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 62ms. Found 5 JPA repository interfaces.
2020-05-10 12:18:43.203 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:18:43.204 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 12:18:43.225 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:18:43.225 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:18:43.225 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:18:43.226 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:18:43.226 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:18:43.227 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-05-10 12:18:43.718 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$20e2794e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 12:18:44.198 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 12:18:44.208 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 12:18:44.209 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 12:18:44.209 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 12:18:44.329 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 12:18:44.329 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2200 ms
2020-05-10 12:18:44.559 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 12:18:44.632 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 12:18:44.760 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 12:18:44.867 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 12:18:45.493 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 12:18:45.512 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 12:18:46.352 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 12:18:46.359 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 12:18:46.388 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 12:18:47.750 [restartedMain] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 9126d4c8-8109-4bd1-a569-d3e17bb18afc

2020-05-10 12:18:48.116 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4e4351d9, org.springframework.security.web.context.SecurityContextPersistenceFilter@229a049c, org.springframework.security.web.header.HeaderWriterFilter@74c9eefd, org.springframework.web.filter.CorsFilter@16105fe0, org.springframework.security.web.authentication.logout.LogoutFilter@e833116, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@13a83d8e, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@1cc1c9a8, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@60cb297c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@545588cb, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@176dab36, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@52934524, org.springframework.security.web.session.SessionManagementFilter@2b951995, org.springframework.security.web.access.ExceptionTranslationFilter@ce9816d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5b7a1000]
2020-05-10 12:18:48.195 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 12:18:48.792 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 12:18:48.815 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 12:18:48.817 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.431 seconds (JVM running for 8.47)
2020-05-10 12:19:09.434 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 30468 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 12:19:09.437 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 12:19:09.497 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 12:19:09.517 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 12:19:09.517 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 12:19:10.292 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:19:10.293 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 12:19:10.356 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:19:10.358 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:19:10.359 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:19:10.360 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:19:10.362 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:19:10.362 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 64ms. Found 0 JDBC repository interfaces.
2020-05-10 12:19:10.370 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:19:10.370 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 12:19:10.431 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 57ms. Found 5 JPA repository interfaces.
2020-05-10 12:19:10.445 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:19:10.446 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 12:19:10.465 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:19:10.466 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:19:10.466 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:19:10.466 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:19:10.467 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:19:10.467 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 12:19:10.897 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$b1a31abf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 12:19:11.381 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 12:19:11.389 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 12:19:11.390 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 12:19:11.390 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 12:19:11.507 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 12:19:11.508 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1991 ms
2020-05-10 12:19:11.740 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 12:19:11.813 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 12:19:11.946 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 12:19:12.041 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 12:19:12.626 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 12:19:12.645 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 12:19:13.638 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 12:19:13.645 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 12:19:13.672 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 12:19:15.003 [restartedMain] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 0d4d8995-c76a-4cf5-8a24-13addc9266d6

2020-05-10 12:19:15.388 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5d7c5f6e, org.springframework.security.web.context.SecurityContextPersistenceFilter@558813ef, org.springframework.security.web.header.HeaderWriterFilter@79d83363, org.springframework.web.filter.CorsFilter@78ac940, org.springframework.security.web.authentication.logout.LogoutFilter@14e7ae6a, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@71315c07, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@11fed830, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@5174250b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7f296652, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@34a74f33, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4cb17115, org.springframework.security.web.session.SessionManagementFilter@29e24635, org.springframework.security.web.access.ExceptionTranslationFilter@44fe20b3, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4d1b80f7]
2020-05-10 12:19:15.461 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 12:19:15.915 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 12:19:15.937 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 12:19:15.939 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.218 seconds (JVM running for 8.335)
2020-05-10 12:19:41.885 [http-nio-8080-exec-3] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 12:19:41.886 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 12:19:41.944 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 57 ms
2020-05-10 12:19:42.128 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:19:42.128 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:19:42.128 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:19:42.134 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:19:42.135 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:19:42.278 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:19:42.339 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:19:42.414 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:19:42.414 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:19:42.429 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:20:54.403 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:20:54.410 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:20:54.414 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:20:54.422 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:20:54.416 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:20:54.426 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:20:54.456 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:20:54.461 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:20:54.495 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:20:54.507 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:21:10.776 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classify', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.typeAll', args=[]}
2020-05-10 12:21:10.789 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classifyBlog/2/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.findBlogByTypeId', args=[2, 0, 5]}
2020-05-10 12:21:10.844 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:21:10.851 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:23:43.485 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:23:43.495 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:23:43.513 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:23:43.517 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:23:43.922 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:23:43.923 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:23:43.923 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:23:43.925 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:23:43.933 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:23:43.924 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:24:04.485 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:24:04.909 [http-nio-8080-exec-3] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 12:24:04.910 [http-nio-8080-exec-3] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 12:24:07.854 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:24:08.165 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:24:08.166 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 12:24:08.172 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:24:08.181 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 12:25:08.617 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/logout', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.logout', args=[]}
2020-05-10 12:25:10.695 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:25:10.704 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:25:10.705 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:25:10.706 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:25:10.717 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:25:10.708 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:25:10.721 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:25:10.728 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:25:10.728 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:25:10.736 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:26:07.834 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:26:07.927 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 12:26:23.607 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:26:23.624 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:26:23.645 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:26:23.653 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:26:23.661 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:26:23.647 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:26:23.656 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:26:23.719 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:26:27.683 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:26:27.693 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 12:26:32.494 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:26:32.502 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:26:32.826 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:26:32.829 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:26:32.830 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:26:32.833 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:26:32.829 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:26:32.835 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:26:36.546 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:26:36.548 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 12:26:42.214 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 12:26:42.241 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : success
2020-05-10 12:26:44.062 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:26:44.256 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=, password=, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 12:29:48.070 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:29:48.071 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:29:48.076 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:29:48.075 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:29:48.094 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:29:48.094 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:29:48.113 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:29:48.108 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:29:51.151 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:29:51.154 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=, password=, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 12:29:58.027 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 12:29:58.030 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : success
2020-05-10 12:29:59.548 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:29:59.550 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=, password=, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 12:30:08.483 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 12:30:08.487 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : success
2020-05-10 12:30:10.004 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:30:10.006 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=, password=, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 12:30:28.621 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:30:28.623 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=, password=, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 12:33:15.552 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:33:15.559 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:33:18.520 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:33:18.523 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=, password=, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 12:33:18.817 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:33:18.823 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=, password=, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 12:33:18.838 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:33:18.838 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 12:33:18.843 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:33:18.845 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 12:33:21.239 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/logout', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.logout', args=[]}
2020-05-10 12:33:21.334 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : success
2020-05-10 12:33:21.709 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:33:21.716 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:33:28.437 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:33:28.438 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 12:33:28.688 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:33:28.689 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 12:33:28.804 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 12:33:28.804 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:33:28.809 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:33:28.811 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 12:33:34.982 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/logout', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.logout', args=[]}
2020-05-10 12:33:34.983 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : error
2020-05-10 12:33:42.546 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:33:42.577 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:33:42.578 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:33:42.578 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:33:42.580 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:33:42.581 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:33:42.579 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:33:42.589 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:33:42.589 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:33:42.592 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:33:49.391 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:33:49.397 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:33:49.411 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:33:49.413 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:33:49.734 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:33:49.734 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:33:49.744 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:33:49.736 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:34:04.755 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:34:04.757 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 12:34:05.011 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:34:05.012 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 12:34:05.319 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:34:05.319 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 12:34:05.323 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:34:05.325 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 12:34:15.706 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/logout', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.logout', args=[]}
2020-05-10 12:34:15.707 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : error
2020-05-10 12:35:20.012 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:35:20.017 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:35:20.015 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:35:20.022 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:35:20.055 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:35:20.057 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:35:20.057 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:35:20.060 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:35:20.066 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:35:20.060 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:35:24.224 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 12:35:24.225 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 12:35:25.794 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:35:25.807 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:35:26.126 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:35:26.131 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:35:26.133 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:35:26.136 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:35:26.128 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:35:26.137 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:35:45.767 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classify', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.typeAll', args=[]}
2020-05-10 12:35:45.771 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classifyBlog/2/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.findBlogByTypeId', args=[2, 0, 5]}
2020-05-10 12:35:45.771 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:35:45.777 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:35:48.000 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classifyBlog/4/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.findBlogByTypeId', args=[4, 0, 5]}
2020-05-10 12:35:48.005 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 0 containing UNKNOWN instances
2020-05-10 12:35:49.448 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classifyBlog/2/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.findBlogByTypeId', args=[2, 0, 5]}
2020-05-10 12:35:49.455 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:35:54.440 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/archives/count', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.ArchiveShowController.count', args=[]}
2020-05-10 12:35:54.445 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : 5
2020-05-10 12:35:54.447 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/archives', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.ArchiveShowController.archives', args=[]}
2020-05-10 12:35:54.483 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : {2020-05=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=6, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)], 2020-04=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451)]}
2020-05-10 12:35:54.691 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/archives/2020-05/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.ArchiveShowController.archives', args=[2020-05, 0, 3]}
2020-05-10 12:35:54.704 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 12:35:56.109 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/13', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.findOne', args=[13]}
2020-05-10 12:35:56.206 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=7, commentNum=1, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)
2020-05-10 12:36:07.628 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.BlogDetailsController.saveComment', args=[BlogDetailsVo{blogId=13, cmtParentId=11, content='回复 【@ttt】：itttzPVwibWlaSB0ZWFkule ', nickname='123b ', email='asd@qq.com'}]}
2020-05-10 12:36:07.955 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : success
2020-05-10 12:36:09.101 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/13', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.findOne', args=[13]}
2020-05-10 12:36:09.120 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=8, commentNum=2, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)
2020-05-10 12:36:48.258 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.BlogDetailsController.saveComment', args=[BlogDetailsVo{blogId=13, cmtParentId=11, content='回复 【@123b 】：kule ……zPVwibWlaSB0ZWFxixi', nickname='cebb', email=''}]}
2020-05-10 12:36:48.291 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : success
2020-05-10 12:36:49.324 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/13', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.findOne', args=[13]}
2020-05-10 12:36:49.345 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)
2020-05-10 12:37:13.816 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:37:13.829 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:37:13.839 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:37:13.840 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:37:13.847 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:37:13.849 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:37:13.843 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 12:37:13.848 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:37:45.736 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 32008 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 12:37:45.738 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 12:37:45.927 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 12:37:45.928 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 12:37:45.928 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 12:37:48.408 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:37:48.409 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 12:37:48.485 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:37:48.486 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:37:48.490 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:37:48.492 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:37:48.495 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:37:48.496 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 81ms. Found 0 JDBC repository interfaces.
2020-05-10 12:37:48.514 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:37:48.514 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 12:37:48.611 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 92ms. Found 5 JPA repository interfaces.
2020-05-10 12:37:48.627 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:37:48.628 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 12:37:48.682 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:37:48.682 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:37:48.683 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:37:48.683 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:37:48.683 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:37:48.684 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19ms. Found 0 Redis repository interfaces.
2020-05-10 12:37:49.323 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$319da49d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 12:37:49.953 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 12:37:49.963 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 12:37:49.964 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 12:37:49.964 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 12:37:50.089 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 12:37:50.089 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 4161 ms
2020-05-10 12:37:50.432 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 12:37:50.624 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 12:37:51.098 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 12:37:51.316 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 12:37:52.157 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 12:37:52.239 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 12:37:53.992 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 12:37:54.000 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 12:37:54.028 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 12:37:55.685 [restartedMain] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: f5a0346a-e79d-47e4-b8f6-37f49673ffc7

2020-05-10 12:37:56.187 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1c73ae02, org.springframework.security.web.context.SecurityContextPersistenceFilter@238dcd11, org.springframework.security.web.header.HeaderWriterFilter@1b713956, org.springframework.web.filter.CorsFilter@44603e73, org.springframework.security.web.authentication.logout.LogoutFilter@60de729d, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@42115d19, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@c63f2a7, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@492da02, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@29c065c1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@685a3f3a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@47d41474, org.springframework.security.web.session.SessionManagementFilter@556ea172, org.springframework.security.web.access.ExceptionTranslationFilter@92e17bb, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@125c35fd]
2020-05-10 12:37:56.273 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 12:37:56.775 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 12:37:56.820 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 12:37:56.822 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 11.965 seconds (JVM running for 13.201)
2020-05-10 12:38:15.822 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 12:38:15.822 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 12:38:15.835 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 13 ms
2020-05-10 12:38:48.880 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 15944 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 12:38:48.883 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 12:38:48.949 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 12:38:48.952 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 12:38:48.953 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 12:38:49.845 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:38:49.846 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 12:38:49.897 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:38:49.898 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:38:49.900 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:38:49.901 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:38:49.903 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 12:38:49.903 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53ms. Found 0 JDBC repository interfaces.
2020-05-10 12:38:49.911 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:38:49.911 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 12:38:49.977 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 60ms. Found 5 JPA repository interfaces.
2020-05-10 12:38:49.995 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 12:38:49.996 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 12:38:50.033 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:38:50.033 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:38:50.033 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:38:50.034 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:38:50.034 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 12:38:50.034 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22ms. Found 0 Redis repository interfaces.
2020-05-10 12:38:50.518 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$cc720f9c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 12:38:51.033 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 12:38:51.043 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 12:38:51.044 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 12:38:51.044 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 12:38:51.183 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 12:38:51.184 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2231 ms
2020-05-10 12:38:51.419 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 12:38:51.494 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 12:38:51.630 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 12:38:51.740 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 12:38:52.406 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 12:38:52.428 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 12:38:53.610 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 12:38:53.618 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 12:38:53.650 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 12:38:55.215 [restartedMain] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 8733acd3-6152-4fa1-acdd-17e07570dfe6

2020-05-10 12:38:55.601 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4fde2f60, org.springframework.security.web.context.SecurityContextPersistenceFilter@10430cb4, org.springframework.security.web.header.HeaderWriterFilter@6ea2dd25, org.springframework.web.filter.CorsFilter@17c78bd3, org.springframework.security.web.authentication.logout.LogoutFilter@2ed3e4c2, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@49ea483f, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@58f86fba, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@49692ffa, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7dd60599, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@365aa6e6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5bf6b618, org.springframework.security.web.session.SessionManagementFilter@76c5e7e3, org.springframework.security.web.access.ExceptionTranslationFilter@34b97c79, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@52099f68]
2020-05-10 12:38:55.688 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 12:38:56.254 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 12:38:56.277 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 12:38:56.280 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 8.184 seconds (JVM running for 9.75)
2020-05-10 12:39:23.519 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 12:39:23.519 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 12:39:23.532 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 12 ms
2020-05-10 12:39:54.405 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 12:39:54.405 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 12:39:54.405 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 12:39:54.417 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 12:39:54.422 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 12:39:54.570 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 12:39:54.631 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:39:54.601 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 12:39:54.638 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 12:39:54.654 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 14:03:26.573 [main] INFO  com.cb.myblog.MyblogApplicationTests - Starting MyblogApplicationTests on DESKTOP-QJF9UQM with PID 22144 (started by ss in E:\IDEA\myblog)
2020-05-10 14:03:26.591 [main] INFO  com.cb.myblog.MyblogApplicationTests - The following profiles are active: dev
2020-05-10 14:03:29.515 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:03:29.519 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 14:03:29.617 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:03:29.620 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:03:29.621 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:03:29.624 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:03:29.628 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:03:29.629 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 99ms. Found 0 JDBC repository interfaces.
2020-05-10 14:03:29.648 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:03:29.649 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 14:03:30.159 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 495ms. Found 5 JPA repository interfaces.
2020-05-10 14:03:30.256 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:03:30.258 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 14:03:30.302 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:03:30.303 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:03:30.303 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:03:30.304 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:03:30.305 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:03:30.306 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23ms. Found 0 Redis repository interfaces.
2020-05-10 14:03:32.234 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$c17e53f0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 14:03:32.924 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 14:03:33.230 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 14:03:33.782 [main] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 14:03:34.510 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 14:03:35.477 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 14:03:35.613 [main] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 14:03:37.960 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 14:03:37.969 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:03:42.808 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 14:03:44.264 [main] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 90b01e7c-f6e4-400d-a5c8-85aa03c4c278

2020-05-10 14:03:44.729 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6b7a0f18, org.springframework.security.web.context.SecurityContextPersistenceFilter@7cab8d52, org.springframework.security.web.header.HeaderWriterFilter@504274c1, org.springframework.security.web.csrf.CsrfFilter@147c4523, org.springframework.security.web.authentication.logout.LogoutFilter@24b4f4a, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1952ad9d, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@7ead0b51, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@188058fb, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@69c6e5, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7d432bc0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@43aa767, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@914ab92, org.springframework.security.web.session.SessionManagementFilter@59263f7b, org.springframework.security.web.access.ExceptionTranslationFilter@3e0e3048, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@67d55a46]
2020-05-10 14:03:44.832 [main] INFO  com.cb.myblog.MyblogApplicationTests - Started MyblogApplicationTests in 19.86 seconds (JVM running for 22.371)
2020-05-10 14:03:45.153 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-10 14:03:45.206 [SpringContextShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:03:45.214 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2020-05-10 14:03:45.235 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2020-05-10 14:04:05.950 [main] INFO  com.cb.myblog.MyblogApplicationTests - Starting MyblogApplicationTests on DESKTOP-QJF9UQM with PID 31676 (started by ss in E:\IDEA\myblog)
2020-05-10 14:04:05.951 [main] INFO  com.cb.myblog.MyblogApplicationTests - The following profiles are active: dev
2020-05-10 14:04:07.501 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:04:07.503 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 14:04:07.559 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:04:07.561 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:04:07.562 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:04:07.564 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:04:07.566 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:04:07.567 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 58ms. Found 0 JDBC repository interfaces.
2020-05-10 14:04:07.580 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:04:07.583 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 14:04:07.796 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 208ms. Found 5 JPA repository interfaces.
2020-05-10 14:04:07.816 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:04:07.818 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 14:04:07.841 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:04:07.841 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:04:07.842 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:04:07.842 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:04:07.843 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:04:07.843 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17ms. Found 0 Redis repository interfaces.
2020-05-10 14:04:08.681 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$847655f7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 14:04:09.076 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 14:04:09.188 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 14:04:09.403 [main] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 14:04:09.878 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 14:04:10.580 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 14:04:10.618 [main] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 14:04:12.152 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 14:04:12.162 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:04:15.243 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 14:04:16.253 [main] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 48019714-01a6-4fce-80b3-b2fb32be788a

2020-05-10 14:04:16.537 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4d24ab25, org.springframework.security.web.context.SecurityContextPersistenceFilter@7f08c343, org.springframework.security.web.header.HeaderWriterFilter@2a15bbf3, org.springframework.security.web.csrf.CsrfFilter@48b01607, org.springframework.security.web.authentication.logout.LogoutFilter@43aa767, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1dbfbd94, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@59263f7b, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@145f1f97, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@779136bf, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6eeeb9da, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7bc4ac3e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@58d4fe33, org.springframework.security.web.session.SessionManagementFilter@5b4b6f3b, org.springframework.security.web.access.ExceptionTranslationFilter@760d6350, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6530a1de]
2020-05-10 14:04:16.645 [main] INFO  com.cb.myblog.MyblogApplicationTests - Started MyblogApplicationTests in 11.821 seconds (JVM running for 13.376)
2020-05-10 14:04:16.870 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-10 14:04:16.886 [SpringContextShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:04:16.889 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2020-05-10 14:04:16.901 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2020-05-10 14:06:29.093 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 8180 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 14:06:29.099 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 14:06:29.171 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 14:06:29.172 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 14:06:29.172 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 14:06:30.074 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:06:30.074 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 14:06:30.127 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:06:30.128 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:06:30.130 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:06:30.131 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:06:30.133 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:06:30.134 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 55ms. Found 0 JDBC repository interfaces.
2020-05-10 14:06:30.144 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:06:30.144 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 14:06:30.218 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 69ms. Found 5 JPA repository interfaces.
2020-05-10 14:06:30.232 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:06:30.233 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 14:06:30.253 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:06:30.254 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:06:30.254 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:06:30.254 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:06:30.254 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:06:30.255 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 14:06:30.822 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$3d992849] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 14:06:31.527 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 14:06:31.539 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 14:06:31.539 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 14:06:31.540 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 14:06:31.694 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 14:06:31.695 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2523 ms
2020-05-10 14:06:31.942 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 14:06:32.009 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 14:06:32.136 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 14:06:32.244 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 14:06:32.827 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 14:06:32.848 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 14:06:33.699 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 14:06:33.707 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:06:33.735 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 14:06:35.378 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 14:06:36.071 [restartedMain] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 5f2ff908-8e88-46bc-8726-529ab827ef44

2020-05-10 14:06:36.185 [restartedMain] INFO  o.s.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@47f06702, org.springframework.security.web.context.SecurityContextPersistenceFilter@7f866c8f, org.springframework.security.web.header.HeaderWriterFilter@5e0e46e8, org.springframework.security.web.csrf.CsrfFilter@3f5a46a7, org.springframework.security.web.authentication.logout.LogoutFilter@1bf661e1, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@333610c9, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@2cf9c4fa, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@7541ab1a, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@588b494e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@222dccd6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@40d7c8da, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5a29058c, org.springframework.security.web.session.SessionManagementFilter@632b002b, org.springframework.security.web.access.ExceptionTranslationFilter@2641bf16, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1a39321]
2020-05-10 14:06:36.298 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 14:06:36.325 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 14:06:36.328 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 8.045 seconds (JVM running for 9.212)
2020-05-10 14:07:12.462 [http-nio-8080-exec-3] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 14:07:12.462 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 14:07:12.570 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 108 ms
2020-05-10 14:11:43.949 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 20260 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 14:11:43.952 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 14:11:44.078 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 14:11:44.078 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 14:11:44.078 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 14:11:45.132 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:11:45.133 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 14:11:45.195 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:11:45.197 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:11:45.198 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:11:45.199 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:11:45.201 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:11:45.202 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65ms. Found 0 JDBC repository interfaces.
2020-05-10 14:11:45.214 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:11:45.215 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 14:11:45.292 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65ms. Found 5 JPA repository interfaces.
2020-05-10 14:11:45.307 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:11:45.308 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 14:11:45.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:11:45.329 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:11:45.329 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:11:45.329 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:11:45.330 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:11:45.330 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-05-10 14:11:45.815 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$f8b81a12] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 14:11:46.684 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 14:11:46.694 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 14:11:46.696 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 14:11:46.697 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 14:11:46.855 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 14:11:46.855 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2776 ms
2020-05-10 14:11:47.224 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 14:11:47.474 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 14:11:47.839 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 14:11:48.085 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 14:11:48.901 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 14:11:49.023 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 14:11:50.756 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 14:11:50.763 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:11:50.790 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 14:11:53.278 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 14:11:54.373 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 14:11:54.434 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 14:11:54.436 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 11.324 seconds (JVM running for 12.813)
2020-05-10 14:12:22.445 [http-nio-8080-exec-2] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 14:12:22.445 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 14:12:22.523 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 77 ms
2020-05-10 14:12:22.726 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classify', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.typeAll', args=[]}
2020-05-10 14:12:22.760 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classifyBlog/2/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.findBlogByTypeId', args=[2, 0, 5]}
2020-05-10 14:12:23.550 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 14:12:23.681 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 14:12:32.336 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 14:12:32.354 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 14:12:32.355 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 14:12:32.358 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 14:12:32.398 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 14:12:32.405 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 14:12:32.375 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 14:12:32.410 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 14:12:42.304 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 14:12:42.839 [http-nio-8080-exec-7] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 14:12:42.840 [http-nio-8080-exec-7] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 14:12:44.013 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, token=$2a$10$GjmPgqWOHKJwY9ceutrK8etAPoowKNguxju3EqhHQIxYIQnt5xIwa}
2020-05-10 14:12:45.879 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 14:12:45.948 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=, password=, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 14:12:46.534 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[]}
2020-05-10 14:12:46.536 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 14:12:46.537 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=, password=, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 14:12:46.541 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 14:12:46.549 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 14:12:46.558 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 14:29:56.665 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 14:29:56.665 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 14:29:56.668 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 14:29:56.670 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 14:29:56.704 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 14:29:56.704 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 14:29:56.756 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 14:29:56.725 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 14:29:56.817 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 14:29:56.846 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 14:45:07.099 [Thread-21] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-10 14:45:07.424 [Thread-21] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:45:07.479 [Thread-21] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2020-05-10 14:45:07.492 [Thread-21] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2020-05-10 14:45:08.362 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 20260 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 14:45:08.363 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 14:45:09.859 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:45:09.859 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 14:45:09.883 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:09.885 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:09.888 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:09.892 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:09.900 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:09.900 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 40ms. Found 0 JDBC repository interfaces.
2020-05-10 14:45:09.909 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:45:09.909 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 14:45:09.958 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 48ms. Found 5 JPA repository interfaces.
2020-05-10 14:45:09.966 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:45:09.966 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 14:45:09.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:09.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:09.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:09.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:09.980 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:09.980 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13ms. Found 0 Redis repository interfaces.
2020-05-10 14:45:10.071 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$f8b81a12] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 14:45:10.332 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 14:45:10.333 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 14:45:10.333 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 14:45:10.334 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 14:45:10.599 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 14:45:10.599 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2214 ms
2020-05-10 14:45:10.700 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 14:45:10.707 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2020-05-10 14:45:10.738 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2020-05-10 14:45:10.738 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 14:45:10.994 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 14:45:10.995 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:45:11.023 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 14:45:11.816 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 14:45:12.276 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 14:45:12.279 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 14:45:12.280 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 4.061 seconds (JVM running for 2010.658)
2020-05-10 14:45:12.283 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2020-05-10 14:45:22.876 [Thread-37] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-10 14:45:22.879 [Thread-37] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:45:22.882 [Thread-37] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2020-05-10 14:45:22.893 [Thread-37] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2020-05-10 14:45:23.431 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 20260 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 14:45:23.431 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 14:45:23.682 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:45:23.682 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 14:45:23.698 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:23.700 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:23.701 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:23.702 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:23.704 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:23.704 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21ms. Found 0 JDBC repository interfaces.
2020-05-10 14:45:23.707 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:45:23.707 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 14:45:23.739 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 31ms. Found 5 JPA repository interfaces.
2020-05-10 14:45:23.744 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:45:23.745 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 14:45:23.757 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:23.757 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:23.757 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:23.757 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:23.758 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:23.758 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12ms. Found 0 Redis repository interfaces.
2020-05-10 14:45:23.818 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$f8b81a12] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 14:45:23.950 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 14:45:23.951 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 14:45:23.951 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 14:45:23.951 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 14:45:24.052 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 14:45:24.052 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 618 ms
2020-05-10 14:45:24.139 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 14:45:24.144 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2020-05-10 14:45:24.153 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2020-05-10 14:45:24.154 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 14:45:24.337 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 14:45:24.338 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:45:24.353 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 14:45:25.085 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 14:45:25.975 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 14:45:25.979 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 14:45:25.979 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 2.6 seconds (JVM running for 2024.356)
2020-05-10 14:45:25.980 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2020-05-10 14:45:28.590 [main] INFO  com.cb.myblog.MyblogApplicationTests - Starting MyblogApplicationTests on DESKTOP-QJF9UQM with PID 27812 (started by ss in E:\IDEA\myblog)
2020-05-10 14:45:28.591 [main] INFO  com.cb.myblog.MyblogApplicationTests - The following profiles are active: dev
2020-05-10 14:45:29.698 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:45:29.700 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 14:45:29.772 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:29.774 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:29.776 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:29.778 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:29.780 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:45:29.781 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 74ms. Found 0 JDBC repository interfaces.
2020-05-10 14:45:29.794 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:45:29.804 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 14:45:30.147 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 339ms. Found 5 JPA repository interfaces.
2020-05-10 14:45:30.174 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:45:30.176 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 14:45:30.213 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:30.213 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:30.213 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:30.214 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:30.214 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:45:30.214 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17ms. Found 0 Redis repository interfaces.
2020-05-10 14:45:31.223 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$b586c03d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 14:45:31.772 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 14:45:31.961 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 14:45:32.601 [main] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 14:45:33.303 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 14:45:34.240 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 14:45:34.355 [main] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 14:45:36.425 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 14:45:36.435 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:45:39.836 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 14:45:40.923 [main] INFO  com.cb.myblog.MyblogApplicationTests - Started MyblogApplicationTests in 13.294 seconds (JVM running for 15.664)
2020-05-10 14:45:41.200 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-10 14:45:41.216 [SpringContextShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:45:41.222 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2020-05-10 14:45:41.235 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2020-05-10 14:47:24.202 [http-nio-8080-exec-2] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 14:47:24.203 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 14:47:24.213 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 9 ms
2020-05-10 14:47:24.218 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 14:47:24.218 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 14:47:24.249 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 14:47:24.241 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 14:47:24.518 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 14:47:24.521 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 14:47:24.521 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 14:47:24.524 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 14:47:24.526 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 14:47:24.531 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 14:52:15.851 [Thread-42] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-10 14:52:15.854 [Thread-42] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:52:15.858 [Thread-42] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown initiated...
2020-05-10 14:52:15.881 [Thread-42] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown completed.
2020-05-10 14:52:16.579 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 20260 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 14:52:16.579 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 14:52:16.853 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:52:16.853 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 14:52:16.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:52:16.871 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:52:16.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:52:16.873 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:52:16.874 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:52:16.874 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20ms. Found 0 JDBC repository interfaces.
2020-05-10 14:52:16.877 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:52:16.878 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 14:52:16.904 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26ms. Found 5 JPA repository interfaces.
2020-05-10 14:52:16.908 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:52:16.908 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 14:52:16.919 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:52:16.919 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:52:16.920 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:52:16.920 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:52:16.920 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:52:16.920 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11ms. Found 0 Redis repository interfaces.
2020-05-10 14:52:16.978 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$f8b81a12] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 14:52:17.103 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 14:52:17.103 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 14:52:17.103 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 14:52:17.103 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 14:52:17.255 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 14:52:17.255 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 673 ms
2020-05-10 14:52:17.343 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 14:52:17.347 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Starting...
2020-05-10 14:52:17.366 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Start completed.
2020-05-10 14:52:17.366 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 14:52:17.514 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 14:52:17.514 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:52:17.528 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 14:52:18.253 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:52:18.348 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Shutdown initiated...
2020-05-10 14:52:18.358 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Shutdown completed.
2020-05-10 14:52:18.359 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2020-05-10 14:52:18.365 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-10 14:52:22.009 [main] INFO  com.cb.myblog.MyblogApplicationTests - Starting MyblogApplicationTests on DESKTOP-QJF9UQM with PID 33452 (started by ss in E:\IDEA\myblog)
2020-05-10 14:52:22.012 [main] INFO  com.cb.myblog.MyblogApplicationTests - The following profiles are active: dev
2020-05-10 14:52:23.263 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:52:23.265 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 14:52:23.320 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:52:23.322 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:52:23.325 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:52:23.327 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:52:23.328 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:52:23.329 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 58ms. Found 0 JDBC repository interfaces.
2020-05-10 14:52:23.342 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:52:23.343 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 14:52:23.543 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 193ms. Found 5 JPA repository interfaces.
2020-05-10 14:52:23.566 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:52:23.570 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 14:52:23.595 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:52:23.596 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:52:23.597 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:52:23.598 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:52:23.598 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:52:23.599 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19ms. Found 0 Redis repository interfaces.
2020-05-10 14:52:24.386 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$3203fa98] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 14:52:24.828 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 14:52:24.976 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 14:52:25.206 [main] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 14:52:25.768 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 14:52:26.651 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 14:52:26.685 [main] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 14:52:27.990 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 14:52:27.998 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:52:30.444 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 14:52:31.431 [main] INFO  com.cb.myblog.MyblogApplicationTests - Started MyblogApplicationTests in 10.454 seconds (JVM running for 12.012)
2020-05-10 14:52:31.672 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-10 14:52:31.698 [SpringContextShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:52:31.701 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2020-05-10 14:52:31.718 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2020-05-10 14:53:04.979 [main] INFO  com.cb.myblog.MyblogApplicationTests - Starting MyblogApplicationTests on DESKTOP-QJF9UQM with PID 7912 (started by ss in E:\IDEA\myblog)
2020-05-10 14:53:04.980 [main] INFO  com.cb.myblog.MyblogApplicationTests - The following profiles are active: dev
2020-05-10 14:53:06.673 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:53:06.675 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 14:53:06.730 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:53:06.732 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:53:06.734 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:53:06.736 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:53:06.738 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 14:53:06.739 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 59ms. Found 0 JDBC repository interfaces.
2020-05-10 14:53:06.754 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:53:06.755 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 14:53:06.955 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 196ms. Found 5 JPA repository interfaces.
2020-05-10 14:53:06.977 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 14:53:06.979 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 14:53:07.004 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:53:07.006 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:53:07.006 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:53:07.007 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:53:07.007 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 14:53:07.007 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18ms. Found 0 Redis repository interfaces.
2020-05-10 14:53:07.844 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$50dd3dd3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 14:53:08.430 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 14:53:08.536 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 14:53:08.724 [main] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 14:53:09.203 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 14:53:10.163 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 14:53:10.217 [main] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 14:53:11.730 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 14:53:11.740 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:53:14.616 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 14:53:15.715 [main] INFO  com.cb.myblog.MyblogApplicationTests - Started MyblogApplicationTests in 11.982 seconds (JVM running for 14.162)
2020-05-10 14:53:15.962 [main] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 14:53:15.963 [main] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 14:53:17.434 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-10 14:53:17.554 [SpringContextShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 14:53:17.561 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2020-05-10 14:53:17.585 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2020-05-10 15:01:00.520 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 15616 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:01:00.522 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:01:00.599 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:01:00.601 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:01:00.601 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:01:01.338 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:01:01.338 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:01:01.386 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:01:01.388 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:01:01.389 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:01:01.391 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:01:01.393 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:01:01.393 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 51ms. Found 0 JDBC repository interfaces.
2020-05-10 15:01:01.402 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:01:01.402 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:01:01.465 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 60ms. Found 5 JPA repository interfaces.
2020-05-10 15:01:01.480 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:01:01.481 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:01:01.501 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:01:01.501 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:01:01.501 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:01:01.502 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:01:01.502 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:01:01.502 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13ms. Found 0 Redis repository interfaces.
2020-05-10 15:01:01.929 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$ac04cda7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:01:02.528 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:01:02.538 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:01:02.539 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:01:02.539 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:01:02.682 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:01:02.682 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2080 ms
2020-05-10 15:01:02.915 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:01:02.992 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:01:03.127 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:01:03.241 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:01:03.890 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:01:03.911 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:01:04.855 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:01:04.862 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:01:04.900 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:01:06.547 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:01:07.173 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:01:07.257 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:01:07.260 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.553 seconds (JVM running for 8.859)
2020-05-10 15:01:56.282 [http-nio-8080-exec-2] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:01:56.282 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:01:56.299 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 16 ms
2020-05-10 15:01:56.347 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classify', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.typeAll', args=[]}
2020-05-10 15:01:56.351 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classifyBlog/2/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.findBlogByTypeId', args=[2, 0, 5]}
2020-05-10 15:01:56.489 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 15:01:56.564 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:01:58.433 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/archives/count', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.ArchiveShowController.count', args=[]}
2020-05-10 15:01:58.441 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : 5
2020-05-10 15:01:58.734 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/archives', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.ArchiveShowController.archives', args=[]}
2020-05-10 15:01:58.751 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : {2020-05=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)], 2020-04=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451)]}
2020-05-10 15:01:59.097 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/archives/2020-05/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.ArchiveShowController.archives', args=[2020-05, 0, 3]}
2020-05-10 15:01:59.104 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:02:02.798 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tagAll', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TagDetailsController.tagAll', args=[]}
2020-05-10 15:02:02.812 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 15:02:03.103 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tagDetails/2/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TagDetailsController.findBlogByTypeId', args=[2, 0, 5]}
2020-05-10 15:02:03.162 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:02:38.466 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:02:38.481 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:02:38.485 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:02:38.494 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:03:19.836 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 15:03:19.846 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:03:19.856 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 15:03:19.883 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 15:03:19.894 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 15:03:19.893 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 15:03:19.929 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 15:03:19.929 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:03:19.932 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 15:03:19.936 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:03:25.422 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:03:25.421 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:03:25.431 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:03:25.436 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:04:14.697 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:04:14.703 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:05:10.098 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 15:05:10.265 [http-nio-8080-exec-2] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 15:05:10.267 [http-nio-8080-exec-2] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 15:05:21.569 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:05:21.577 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:07:11.007 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 25252 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:07:11.011 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:07:11.069 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:07:11.069 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:07:11.069 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:07:11.966 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:07:11.967 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:07:12.022 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:07:12.024 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:07:12.026 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:07:12.028 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:07:12.030 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:07:12.030 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 59ms. Found 0 JDBC repository interfaces.
2020-05-10 15:07:12.041 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:07:12.041 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:07:12.111 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65ms. Found 5 JPA repository interfaces.
2020-05-10 15:07:12.125 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:07:12.126 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:07:12.147 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:07:12.147 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:07:12.148 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:07:12.148 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:07:12.148 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:07:12.149 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 15:07:12.644 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$8cb8164f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:07:13.154 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:07:13.165 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:07:13.166 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:07:13.166 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:07:13.293 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:07:13.293 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2224 ms
2020-05-10 15:07:13.533 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:07:13.609 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:07:13.744 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:07:13.862 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:07:14.596 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:07:14.615 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:07:15.443 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:07:15.451 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:07:15.497 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:07:16.931 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:07:17.532 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:07:17.557 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:07:17.559 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.26 seconds (JVM running for 8.416)
2020-05-10 15:07:39.701 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:07:39.702 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:07:39.719 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 17 ms
2020-05-10 15:07:39.877 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 15:07:40.103 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 15:07:40.108 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 15:07:41.025 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$s8IURYiSjUD5rm.78KTZEexX9SgNG1Vwlp553qhh9.hUxw0afqQJy}
2020-05-10 15:07:43.713 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:07:43.713 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:07:43.776 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:07:43.776 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:07:52.102 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/types/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TypeController.types', args=[0, 5]}
2020-05-10 15:07:52.126 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Type instances
2020-05-10 15:09:37.577 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/tags/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TagController.tags', args=[0, 5]}
2020-05-10 15:09:37.596 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Tag instances
2020-05-10 15:10:45.101 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 31580 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:10:45.104 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:10:45.206 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:10:45.210 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:10:45.211 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:10:46.183 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:10:46.184 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:10:46.237 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:10:46.239 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:10:46.240 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:10:46.241 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:10:46.243 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:10:46.244 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 56ms. Found 0 JDBC repository interfaces.
2020-05-10 15:10:46.253 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:10:46.253 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:10:46.317 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 59ms. Found 5 JPA repository interfaces.
2020-05-10 15:10:46.344 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:10:46.345 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:10:46.365 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:10:46.365 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:10:46.366 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:10:46.366 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:10:46.366 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:10:46.367 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-05-10 15:10:46.819 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$9dd7d5d8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:10:47.309 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:10:47.318 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:10:47.319 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:10:47.319 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:10:47.445 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:10:47.445 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2234 ms
2020-05-10 15:10:47.672 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:10:47.743 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:10:47.871 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:10:47.977 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:10:48.574 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:10:48.593 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:10:49.438 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:10:49.447 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:10:49.475 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:10:51.217 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:10:51.901 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:10:51.924 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:10:51.927 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.564 seconds (JVM running for 8.64)
2020-05-10 15:11:08.616 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:11:08.616 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:11:08.629 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 12 ms
2020-05-10 15:11:08.664 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:11:08.734 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:11:14.876 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 15:11:15.038 [http-nio-8080-exec-2] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 15:11:15.040 [http-nio-8080-exec-2] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 15:11:15.979 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6}
2020-05-10 15:11:18.388 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:11:18.392 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:11:18.396 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:11:18.441 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:12:38.741 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 20160 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:12:38.743 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:12:38.796 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:12:38.797 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:12:38.797 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:12:39.534 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:12:39.535 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:12:39.586 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:12:39.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:12:39.589 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:12:39.590 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:12:39.592 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:12:39.593 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52ms. Found 0 JDBC repository interfaces.
2020-05-10 15:12:39.611 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:12:39.611 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:12:39.677 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 62ms. Found 5 JPA repository interfaces.
2020-05-10 15:12:39.690 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:12:39.692 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:12:39.711 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:12:39.712 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:12:39.712 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:12:39.712 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:12:39.713 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:12:39.713 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13ms. Found 0 Redis repository interfaces.
2020-05-10 15:12:40.126 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$13363d09] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:12:40.612 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:12:40.622 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:12:40.622 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:12:40.623 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:12:40.737 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:12:40.737 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1940 ms
2020-05-10 15:12:40.958 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:12:41.032 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:12:41.154 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:12:41.249 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:12:41.848 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:12:41.868 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:12:42.729 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:12:42.737 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:12:42.767 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:12:44.396 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:12:45.163 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:12:45.186 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:12:45.188 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.241 seconds (JVM running for 8.306)
2020-05-10 15:12:57.037 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:12:57.037 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:12:57.050 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 12 ms
2020-05-10 15:12:57.419 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/types/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TypeController.types', args=[0, 5]}
2020-05-10 15:12:57.513 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Type instances
2020-05-10 15:13:02.791 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:13:02.822 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:13:05.276 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:13:05.276 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:13:05.285 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:13:05.305 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:15:44.637 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 22660 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:15:44.640 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:15:44.715 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:15:44.721 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:15:44.721 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:15:45.533 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:15:45.533 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:15:45.584 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:15:45.585 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:15:45.587 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:15:45.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:15:45.590 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:15:45.591 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52ms. Found 0 JDBC repository interfaces.
2020-05-10 15:15:45.602 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:15:45.602 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:15:45.680 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 73ms. Found 5 JPA repository interfaces.
2020-05-10 15:15:45.694 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:15:45.695 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:15:45.717 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:15:45.718 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:15:45.718 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:15:45.718 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:15:45.719 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:15:45.719 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-05-10 15:15:46.161 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$b5f8c24e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:15:46.727 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:15:46.736 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:15:46.736 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:15:46.737 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:15:46.868 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:15:46.868 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2145 ms
2020-05-10 15:15:47.142 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:15:47.241 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:15:47.395 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:15:47.506 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:15:48.097 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:15:48.117 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:15:48.983 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:15:48.990 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:15:49.022 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:15:50.593 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:15:51.196 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:15:51.218 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:15:51.221 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.284 seconds (JVM running for 8.324)
2020-05-10 15:16:12.956 [http-nio-8080-exec-2] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:16:12.956 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:16:12.999 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 42 ms
2020-05-10 15:16:13.061 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 15:16:13.061 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 15:16:13.061 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 15:16:13.061 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 15:16:13.062 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:16:13.193 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 15:16:13.223 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:16:13.202 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 15:16:13.234 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:16:13.218 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 15:16:23.296 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:16:23.297 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:16:23.305 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:16:23.342 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:16:53.557 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 27588 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:16:53.564 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:16:53.634 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:16:53.635 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:16:53.635 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:16:54.476 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:16:54.477 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:16:54.527 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:16:54.528 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:16:54.530 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:16:54.531 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:16:54.534 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:16:54.535 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53ms. Found 0 JDBC repository interfaces.
2020-05-10 15:16:54.544 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:16:54.545 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:16:54.619 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 69ms. Found 5 JPA repository interfaces.
2020-05-10 15:16:54.637 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:16:54.638 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:16:54.663 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:16:54.664 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:16:54.664 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:16:54.664 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:16:54.664 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:16:54.664 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20ms. Found 0 Redis repository interfaces.
2020-05-10 15:16:55.167 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$2192814c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:16:55.707 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:16:55.717 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:16:55.717 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:16:55.718 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:16:55.836 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:16:55.837 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2202 ms
2020-05-10 15:16:56.057 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:16:56.136 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:16:56.295 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:16:56.389 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:16:56.988 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:16:57.007 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:16:57.997 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:16:58.005 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:16:58.031 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:16:59.545 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:17:00.154 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:17:00.197 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:17:00.200 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.407 seconds (JVM running for 8.612)
2020-05-10 15:17:10.304 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:17:10.304 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:17:10.317 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 13 ms
2020-05-10 15:17:11.046 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:17:11.046 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:17:11.159 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:17:11.159 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:18:30.919 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 14276 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:18:30.921 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:18:30.993 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:18:30.997 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:18:30.998 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:18:31.907 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:18:31.907 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:18:31.958 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:18:31.960 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:18:31.961 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:18:31.963 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:18:31.964 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:18:31.965 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53ms. Found 0 JDBC repository interfaces.
2020-05-10 15:18:31.975 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:18:31.976 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:18:32.045 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65ms. Found 5 JPA repository interfaces.
2020-05-10 15:18:32.061 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:18:32.062 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:18:32.085 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:18:32.085 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:18:32.085 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:18:32.086 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:18:32.086 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:18:32.086 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-05-10 15:18:32.515 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$d24e42b4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:18:33.007 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:18:33.018 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:18:33.019 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:18:33.019 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:18:33.142 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:18:33.142 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2144 ms
2020-05-10 15:18:33.364 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:18:33.439 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:18:33.570 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:18:33.686 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:18:34.305 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:18:34.323 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:18:35.172 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:18:35.180 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:18:35.209 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:18:36.799 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:18:37.414 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:18:37.437 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:18:37.440 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.318 seconds (JVM running for 8.379)
2020-05-10 15:18:50.410 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:18:50.410 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:18:50.423 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 13 ms
2020-05-10 15:18:51.084 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:18:51.084 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:18:51.180 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:18:51.180 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:19:04.168 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 21936 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:19:04.217 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:19:04.327 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:19:04.328 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:19:04.328 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:19:05.173 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:19:05.174 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:19:05.226 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:19:05.227 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:19:05.229 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:19:05.230 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:19:05.232 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:19:05.232 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 54ms. Found 0 JDBC repository interfaces.
2020-05-10 15:19:05.243 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:19:05.244 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:19:05.316 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 67ms. Found 5 JPA repository interfaces.
2020-05-10 15:19:05.330 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:19:05.331 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:19:05.351 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:19:05.352 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:19:05.352 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:19:05.352 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:19:05.352 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:19:05.353 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 15:19:05.782 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$14d73507] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:19:06.270 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:19:06.279 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:19:06.280 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:19:06.280 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:19:06.397 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:19:06.397 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2069 ms
2020-05-10 15:19:06.645 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:19:06.722 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:19:06.861 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:19:06.982 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:19:07.583 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:19:07.604 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:19:08.439 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:19:08.446 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:19:08.471 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:19:09.999 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:19:10.579 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:19:10.607 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:19:10.609 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.147 seconds (JVM running for 8.198)
2020-05-10 15:19:26.357 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:19:26.357 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:19:26.371 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 14 ms
2020-05-10 15:19:27.029 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:19:27.149 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:19:27.320 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:19:27.349 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:19:53.810 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 21620 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:19:53.812 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:19:53.878 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:19:53.878 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:19:53.879 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:19:54.677 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:19:54.678 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:19:54.730 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:19:54.732 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:19:54.734 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:19:54.736 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:19:54.737 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:19:54.738 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 55ms. Found 0 JDBC repository interfaces.
2020-05-10 15:19:54.747 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:19:54.747 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:19:54.821 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 69ms. Found 5 JPA repository interfaces.
2020-05-10 15:19:54.834 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:19:54.835 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:19:54.855 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:19:54.855 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:19:54.855 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:19:54.856 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:19:54.856 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:19:54.856 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 15:19:55.276 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$c5a3d7b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:19:55.763 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:19:55.771 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:19:55.772 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:19:55.772 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:19:55.893 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:19:55.893 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2014 ms
2020-05-10 15:19:56.116 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:19:56.191 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:19:56.321 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:19:56.434 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:19:57.013 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:19:57.032 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:19:57.865 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:19:57.872 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:19:57.898 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:19:59.412 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:20:00.003 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:20:00.027 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:20:00.030 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 6.882 seconds (JVM running for 7.936)
2020-05-10 15:20:05.732 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:20:05.732 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:20:05.745 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 13 ms
2020-05-10 15:20:06.325 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:20:06.428 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:20:06.609 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:20:06.639 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:23:33.375 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:23:33.387 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:23:33.688 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:23:33.696 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:25:08.879 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 1548 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:25:08.889 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:25:09.151 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:25:09.158 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:25:09.161 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:25:10.000 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:25:10.001 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:25:10.054 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:25:10.056 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:25:10.058 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:25:10.059 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:25:10.061 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:25:10.061 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 55ms. Found 0 JDBC repository interfaces.
2020-05-10 15:25:10.072 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:25:10.072 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:25:10.140 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 63ms. Found 5 JPA repository interfaces.
2020-05-10 15:25:10.154 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:25:10.155 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:25:10.175 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:25:10.176 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:25:10.176 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:25:10.177 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:25:10.177 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:25:10.177 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-05-10 15:25:16.140 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 12428 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:25:16.142 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:25:16.271 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:25:16.271 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:25:16.271 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:25:17.281 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:25:17.281 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:25:17.333 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:25:17.335 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:25:17.336 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:25:17.338 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:25:17.339 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:25:17.340 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53ms. Found 0 JDBC repository interfaces.
2020-05-10 15:25:17.351 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:25:17.351 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:25:17.426 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 70ms. Found 5 JPA repository interfaces.
2020-05-10 15:25:17.443 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:25:17.444 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:25:17.465 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:25:17.466 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:25:17.466 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:25:17.466 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:25:17.467 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:25:17.467 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-05-10 15:25:17.905 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$e0c8587e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:25:18.415 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:25:18.424 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:25:18.424 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:25:18.425 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:25:18.549 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:25:18.549 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2277 ms
2020-05-10 15:25:18.777 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:25:18.850 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:25:18.994 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:25:19.092 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:25:19.676 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:25:19.694 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:25:20.565 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:25:20.574 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:25:20.602 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:25:22.102 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:25:22.733 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:25:22.760 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:25:22.763 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.303 seconds (JVM running for 8.353)
2020-05-10 15:25:35.906 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:25:35.907 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:25:35.920 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 13 ms
2020-05-10 15:25:35.968 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:25:35.975 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 15:25:36.288 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:25:36.403 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:26:31.275 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 33772 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:26:31.277 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:26:31.387 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:26:31.394 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:26:31.395 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:26:32.276 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:26:32.276 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:26:32.326 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:26:32.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:26:32.329 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:26:32.330 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:26:32.332 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:26:32.333 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52ms. Found 0 JDBC repository interfaces.
2020-05-10 15:26:32.343 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:26:32.344 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:26:32.403 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 55ms. Found 5 JPA repository interfaces.
2020-05-10 15:26:32.419 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:26:32.420 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:26:32.441 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:26:32.441 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:26:32.441 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:26:32.442 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:26:32.442 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:26:32.442 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-05-10 15:26:32.860 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$6854528a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:26:33.354 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:26:33.363 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:26:33.363 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:26:33.363 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:26:33.477 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:26:33.477 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2082 ms
2020-05-10 15:26:33.687 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:26:33.755 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:26:33.880 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:26:33.987 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:26:34.576 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:26:34.595 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:26:35.460 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:26:35.466 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:26:35.494 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:26:36.958 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:26:37.557 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:26:37.580 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:26:37.583 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.0 seconds (JVM running for 8.051)
2020-05-10 15:26:57.228 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:26:57.229 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:26:57.241 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 12 ms
2020-05-10 15:26:57.277 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:26:57.282 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 15:26:59.497 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 15:26:59.646 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:26:59.806 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 15:26:59.806 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 15:26:59.806 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 15:26:59.823 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 15:26:59.882 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 15:26:59.897 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 15:27:06.659 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:27:06.659 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 15:27:38.774 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 15:27:38.787 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 15:27:38.787 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 15:27:38.780 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 15:27:38.799 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:27:38.791 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 15:27:38.824 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 15:27:38.790 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 15:34:10.508 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 15:34:10.519 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:34:10.872 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 15:34:10.872 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 15:34:10.875 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 15:34:10.885 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:34:10.884 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 15:34:10.875 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 15:34:10.892 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 15:34:10.903 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:34:25.217 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 21588 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:34:25.219 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:34:25.319 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:34:25.319 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:34:25.319 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:34:27.447 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:34:27.448 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:34:27.546 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:34:27.548 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:34:27.550 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:34:27.551 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:34:27.554 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:34:27.555 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 102ms. Found 0 JDBC repository interfaces.
2020-05-10 15:34:27.566 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:34:27.566 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:34:27.637 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 67ms. Found 5 JPA repository interfaces.
2020-05-10 15:34:27.658 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:34:27.659 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:34:27.681 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:34:27.682 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:34:27.682 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:34:27.682 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:34:27.683 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:34:27.683 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-05-10 15:34:28.134 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$fe1e253] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:34:28.913 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:34:28.921 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:34:28.922 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:34:28.922 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:34:29.045 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:34:29.045 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 3726 ms
2020-05-10 15:34:29.356 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:34:29.576 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:34:30.032 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:34:30.221 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:34:31.014 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:34:31.094 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:34:33.431 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:34:33.438 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:34:33.472 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:34:35.301 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:34:35.884 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:34:36.006 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:34:36.008 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 11.435 seconds (JVM running for 12.679)
2020-05-10 15:34:55.147 [http-nio-8080-exec-2] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:34:55.147 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:34:55.162 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 15 ms
2020-05-10 15:34:55.192 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classify', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.typeAll', args=[]}
2020-05-10 15:34:55.194 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classifyBlog/2/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.findBlogByTypeId', args=[2, 0, 5]}
2020-05-10 15:34:55.394 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 15:34:55.433 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:35:14.018 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:35:14.453 [http-nio-8080-exec-3] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 15:35:14.454 [http-nio-8080-exec-3] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 15:35:15.260 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classify', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.typeAll', args=[]}
2020-05-10 15:35:15.265 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 15:35:15.611 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classifyBlog/2/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.findBlogByTypeId', args=[2, 0, 5]}
2020-05-10 15:35:15.620 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:35:19.151 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:35:19.691 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:35:19.704 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:35:19.796 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:35:19.809 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:43:48.977 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:44:06.962 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 11936 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:44:06.965 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:44:07.035 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:44:07.035 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:44:07.036 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:44:07.930 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:44:07.930 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:44:07.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:44:07.980 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:44:07.981 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:44:07.982 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:44:07.984 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:44:07.985 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 50ms. Found 0 JDBC repository interfaces.
2020-05-10 15:44:07.995 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:44:07.995 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:44:08.065 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65ms. Found 5 JPA repository interfaces.
2020-05-10 15:44:08.081 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:44:08.082 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:44:08.101 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:44:08.101 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:44:08.102 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:44:08.102 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:44:08.102 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:44:08.102 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 15:44:08.512 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$3e55fdfc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:44:08.994 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:44:09.003 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:44:09.003 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:44:09.004 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:44:09.123 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:44:09.123 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2087 ms
2020-05-10 15:44:09.343 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:44:09.412 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:44:09.543 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:44:09.638 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:44:10.237 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:44:10.255 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:44:11.107 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:44:11.114 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:44:11.141 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:44:12.628 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:44:13.209 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:44:13.232 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:44:13.235 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 6.97 seconds (JVM running for 8.023)
2020-05-10 15:44:20.540 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:44:20.541 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:44:20.570 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 29 ms
2020-05-10 15:44:20.630 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:44:20.752 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 15:44:20.753 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 15:44:22.184 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:44:22.214 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:44:22.243 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:44:22.298 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:44:22.298 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:46:29.017 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 33748 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:46:29.019 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:46:29.083 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:46:29.083 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:46:29.084 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:46:31.237 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:46:31.237 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:46:31.293 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:46:31.294 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:46:31.296 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:46:31.297 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:46:31.299 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:46:31.300 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 57ms. Found 0 JDBC repository interfaces.
2020-05-10 15:46:31.310 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:46:31.310 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:46:31.386 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 71ms. Found 5 JPA repository interfaces.
2020-05-10 15:46:31.401 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:46:31.402 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:46:31.423 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:46:31.423 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:46:31.423 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:46:31.424 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:46:31.424 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:46:31.424 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 15:46:31.951 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$887341ae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:46:32.668 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:46:32.680 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:46:32.681 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:46:32.681 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:46:32.817 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:46:32.817 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 3733 ms
2020-05-10 15:46:33.150 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:46:33.365 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:46:33.819 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:46:34.059 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:46:34.786 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:46:34.870 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:46:36.527 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:46:36.534 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:46:36.561 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:46:38.224 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:46:38.995 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:46:39.040 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:46:39.042 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 10.685 seconds (JVM running for 11.925)
2020-05-10 15:46:51.740 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:46:51.741 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:46:51.754 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 13 ms
2020-05-10 15:46:51.820 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:46:51.915 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 15:46:51.916 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 15:46:53.279 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:46:53.595 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:46:53.595 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:46:54.108 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:46:54.108 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:48:40.396 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 30932 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:48:40.398 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:48:40.474 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:48:40.474 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:48:40.474 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:48:41.275 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:48:41.276 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:48:41.327 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:48:41.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:48:41.330 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:48:41.332 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:48:41.333 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:48:41.334 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 54ms. Found 0 JDBC repository interfaces.
2020-05-10 15:48:41.342 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:48:41.343 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:48:41.413 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 67ms. Found 5 JPA repository interfaces.
2020-05-10 15:48:41.429 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:48:41.430 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:48:41.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:48:41.450 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:48:41.450 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:48:41.450 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:48:41.450 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:48:41.451 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 15:48:41.877 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$c11b3e39] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:48:42.382 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:48:42.390 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:48:42.391 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:48:42.391 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:48:42.507 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:48:42.507 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2033 ms
2020-05-10 15:48:42.722 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:48:42.791 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:48:42.913 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:48:43.016 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:48:43.588 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:48:43.605 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:48:44.437 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:48:44.444 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:48:44.472 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:48:46.000 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:48:46.620 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:48:46.646 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:48:46.649 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 6.949 seconds (JVM running for 7.988)
2020-05-10 15:48:51.469 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:48:51.469 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:48:51.482 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 12 ms
2020-05-10 15:48:51.526 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:48:51.654 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 15:48:51.655 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 15:48:52.922 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:48:52.931 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:48:53.047 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:48:53.220 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:48:53.248 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:49:55.886 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 33324 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:49:55.890 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:49:55.960 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:49:55.961 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:49:55.961 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:49:56.695 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:49:56.696 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:49:56.746 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:49:56.747 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:49:56.749 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:49:56.750 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:49:56.752 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:49:56.753 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52ms. Found 0 JDBC repository interfaces.
2020-05-10 15:49:56.769 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:49:56.769 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:49:56.831 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 57ms. Found 5 JPA repository interfaces.
2020-05-10 15:49:56.847 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:49:56.848 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:49:56.866 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:49:56.868 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:49:56.868 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:49:56.869 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:49:56.869 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:49:56.869 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 15:49:57.283 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$301402a3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:49:57.765 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:49:57.774 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:49:57.774 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:49:57.775 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:49:57.893 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:49:57.894 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1932 ms
2020-05-10 15:49:58.110 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:49:58.181 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:49:58.315 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:49:58.424 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:49:59.031 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:49:59.050 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:49:59.935 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:49:59.944 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:49:59.973 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:50:01.617 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:50:02.187 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:50:02.211 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:50:02.213 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.226 seconds (JVM running for 8.421)
2020-05-10 15:52:25.795 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:52:25.795 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:52:25.808 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 13 ms
2020-05-10 15:52:25.852 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:52:25.997 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 15:52:26.000 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 15:52:27.278 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:52:27.309 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:52:27.315 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:52:27.428 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:52:27.428 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:52:59.008 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 24860 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:52:59.010 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:52:59.090 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:52:59.090 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:52:59.090 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:52:59.934 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:52:59.935 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:52:59.986 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:52:59.989 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:52:59.990 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:52:59.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:52:59.993 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:52:59.993 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53ms. Found 0 JDBC repository interfaces.
2020-05-10 15:53:00.004 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:53:00.004 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:53:00.077 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 68ms. Found 5 JPA repository interfaces.
2020-05-10 15:53:00.092 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:53:00.093 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:53:00.111 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:53:00.112 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:53:00.112 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:53:00.112 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:53:00.113 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:53:00.113 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13ms. Found 0 Redis repository interfaces.
2020-05-10 15:53:00.533 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$dc6271ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:53:01.016 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:53:01.025 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:53:01.025 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:53:01.026 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:53:01.148 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:53:01.148 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2058 ms
2020-05-10 15:53:01.368 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:53:01.438 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:53:01.566 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:53:01.677 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:53:02.259 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:53:02.278 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:53:03.098 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:53:03.105 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:53:03.149 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:53:04.635 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:53:05.208 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:53:05.232 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:53:05.234 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 6.991 seconds (JVM running for 8.03)
2020-05-10 15:53:10.489 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:53:10.489 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:53:10.505 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 15 ms
2020-05-10 15:53:10.558 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:53:10.681 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 15:53:10.684 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 15:53:12.245 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/tags/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TagController.tags', args=[0, 5]}
2020-05-10 15:53:12.322 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Tag instances
2020-05-10 15:54:04.736 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 21888 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 15:54:04.740 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 15:54:04.821 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 15:54:04.827 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 15:54:04.828 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 15:54:05.576 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:54:05.576 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 15:54:05.625 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:54:05.626 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:54:05.629 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:54:05.630 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:54:05.632 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 15:54:05.632 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 51ms. Found 0 JDBC repository interfaces.
2020-05-10 15:54:05.647 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:54:05.648 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 15:54:05.713 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 60ms. Found 5 JPA repository interfaces.
2020-05-10 15:54:05.728 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 15:54:05.728 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 15:54:05.748 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:54:05.748 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:54:05.748 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:54:05.749 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:54:05.749 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 15:54:05.749 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-05-10 15:54:06.162 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$c00fa240] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 15:54:06.654 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 15:54:06.663 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 15:54:06.663 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 15:54:06.663 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 15:54:06.779 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 15:54:06.779 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1951 ms
2020-05-10 15:54:06.995 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 15:54:07.065 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 15:54:07.189 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 15:54:07.283 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 15:54:07.855 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 15:54:07.872 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 15:54:08.728 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 15:54:08.735 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 15:54:08.762 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 15:54:10.370 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 15:54:10.945 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 15:54:10.967 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 15:54:10.970 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 6.988 seconds (JVM running for 8.083)
2020-05-10 15:54:16.116 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 15:54:16.116 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 15:54:16.132 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 16 ms
2020-05-10 15:54:16.201 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$c.MWTUCeOCmW6x.pEPmfYeqfIcpsJ1b1sv5Md51zCumFgrm5MtIg6]}
2020-05-10 15:54:16.357 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 15:54:16.358 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 15:54:17.152 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 15:54:17.442 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:54:17.561 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:54:32.507 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 15:54:32.893 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$7aQ9EuKSw4fp53S0HC0v/OGCKA2VsrXM85.7DcaQROxvRuABe/a/q}
2020-05-10 15:54:34.638 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$7aQ9EuKSw4fp53S0HC0v/OGCKA2VsrXM85.7DcaQROxvRuABe/a/q]}
2020-05-10 15:54:34.711 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 15:54:35.278 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$7aQ9EuKSw4fp53S0HC0v/OGCKA2VsrXM85.7DcaQROxvRuABe/a/q]}
2020-05-10 15:54:35.282 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 15:54:35.285 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:54:35.304 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:54:35.320 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:54:35.334 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:54:43.224 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$7aQ9EuKSw4fp53S0HC0v/OGCKA2VsrXM85.7DcaQROxvRuABe/a/q]}
2020-05-10 15:54:43.227 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 15:54:43.474 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/types/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TypeController.types', args=[0, 5]}
2020-05-10 15:54:43.505 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Type instances
2020-05-10 15:54:44.449 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$7aQ9EuKSw4fp53S0HC0v/OGCKA2VsrXM85.7DcaQROxvRuABe/a/q]}
2020-05-10 15:54:44.452 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 15:54:44.800 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/tags/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TagController.tags', args=[0, 5]}
2020-05-10 15:54:44.810 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Tag instances
2020-05-10 15:54:45.920 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$7aQ9EuKSw4fp53S0HC0v/OGCKA2VsrXM85.7DcaQROxvRuABe/a/q]}
2020-05-10 15:54:45.923 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 15:54:46.278 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:54:46.288 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:55:07.722 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:55:07.731 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:55:13.026 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/types/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TypeController.types', args=[0, 5]}
2020-05-10 15:55:13.033 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Type instances
2020-05-10 15:55:40.806 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 15:55:40.812 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 15:55:40.817 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:55:40.820 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:55:40.825 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 15:55:40.829 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:55:40.831 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 15:55:40.854 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 15:55:40.855 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 15:55:40.853 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 15:55:45.183 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:55:45.185 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:55:45.191 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:55:45.195 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:57:17.737 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:57:17.748 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:57:25.707 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tagAll', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TagDetailsController.tagAll', args=[]}
2020-05-10 15:57:25.707 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tagDetails/2/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TagDetailsController.findBlogByTypeId', args=[2, 0, 5]}
2020-05-10 15:57:25.713 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 15:57:25.860 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:57:40.647 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 15:57:40.762 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$KeUNB1YmWQEUclF2vfno4eqEdQ/NIDq4BV28gs903Z7EHdSILH4WW}
2020-05-10 15:57:42.600 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$KeUNB1YmWQEUclF2vfno4eqEdQ/NIDq4BV28gs903Z7EHdSILH4WW]}
2020-05-10 15:57:42.606 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 15:57:42.857 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$KeUNB1YmWQEUclF2vfno4eqEdQ/NIDq4BV28gs903Z7EHdSILH4WW]}
2020-05-10 15:57:42.859 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 15:57:43.168 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:57:43.178 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:57:43.179 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:57:43.184 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:57:49.916 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$KeUNB1YmWQEUclF2vfno4eqEdQ/NIDq4BV28gs903Z7EHdSILH4WW]}
2020-05-10 15:57:49.918 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 15:57:50.168 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/types/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TypeController.types', args=[0, 5]}
2020-05-10 15:57:50.172 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Type instances
2020-05-10 15:57:54.140 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:57:54.146 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:59:44.329 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 15:59:44.443 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$NPkkf9PvqKfQSWEP2937Y.buW9zkp1lfN0d0NjchFqJD9ayEvg4EK}
2020-05-10 15:59:45.967 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$NPkkf9PvqKfQSWEP2937Y.buW9zkp1lfN0d0NjchFqJD9ayEvg4EK]}
2020-05-10 15:59:45.971 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 15:59:46.364 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$NPkkf9PvqKfQSWEP2937Y.buW9zkp1lfN0d0NjchFqJD9ayEvg4EK]}
2020-05-10 15:59:46.364 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 15:59:46.367 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 15:59:46.370 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:59:46.372 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 15:59:46.376 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 15:59:57.052 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 15:59:57.063 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:00:47.571 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 16:00:47.571 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 16:00:47.578 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:00:47.576 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 16:00:47.588 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 16:00:47.597 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 16:00:47.607 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 16:00:47.589 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:00:47.619 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:00:47.606 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 16:00:51.569 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$NPkkf9PvqKfQSWEP2937Y.buW9zkp1lfN0d0NjchFqJD9ayEvg4EK]}
2020-05-10 16:00:51.573 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:00:52.073 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$NPkkf9PvqKfQSWEP2937Y.buW9zkp1lfN0d0NjchFqJD9ayEvg4EK]}
2020-05-10 16:00:52.074 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:00:52.074 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 16:00:52.076 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:00:52.080 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:00:52.081 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 16:00:54.350 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/logout', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.logout', args=[null]}
2020-05-10 16:02:27.743 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$NPkkf9PvqKfQSWEP2937Y.buW9zkp1lfN0d0NjchFqJD9ayEvg4EK]}
2020-05-10 16:02:27.747 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:02:44.550 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 30772 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 16:02:44.614 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 16:02:44.681 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 16:02:44.681 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 16:02:44.682 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 16:02:46.994 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 16:02:46.995 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 16:02:47.216 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:02:47.218 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:02:47.219 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:02:47.220 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:02:47.221 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:02:47.222 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 223ms. Found 0 JDBC repository interfaces.
2020-05-10 16:02:47.237 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 16:02:47.238 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 16:02:47.309 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 67ms. Found 5 JPA repository interfaces.
2020-05-10 16:02:47.327 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 16:02:47.328 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 16:02:47.359 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:02:47.359 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:02:47.359 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:02:47.360 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:02:47.360 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:02:47.360 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-05-10 16:02:47.870 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$16b04494] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 16:02:48.708 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 16:02:48.741 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 16:02:48.742 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 16:02:48.742 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 16:02:48.879 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 16:02:48.880 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 4198 ms
2020-05-10 16:02:49.226 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 16:02:49.621 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 16:02:50.040 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 16:02:50.289 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 16:02:51.183 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 16:02:51.271 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 16:02:52.830 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 16:02:52.837 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 16:02:52.863 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 16:02:54.530 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 16:02:55.156 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 16:02:55.207 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 16:02:55.209 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 11.308 seconds (JVM running for 12.701)
2020-05-10 16:03:02.936 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 16:03:02.937 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 16:03:02.957 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 20 ms
2020-05-10 16:03:03.011 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$NPkkf9PvqKfQSWEP2937Y.buW9zkp1lfN0d0NjchFqJD9ayEvg4EK]}
2020-05-10 16:03:03.220 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 16:03:03.222 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 16:03:04.310 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:03:04.427 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/tags/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TagController.tags', args=[0, 5]}
2020-05-10 16:03:04.573 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Tag instances
2020-05-10 16:03:14.171 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/logout', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.logout', args=[1]}
2020-05-10 16:05:20.444 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 2460 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 16:05:20.447 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 16:05:20.537 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 16:05:20.538 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 16:05:20.538 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 16:05:21.391 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 16:05:21.392 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 16:05:21.440 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:05:21.442 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:05:21.444 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:05:21.445 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:05:21.447 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:05:21.447 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 51ms. Found 0 JDBC repository interfaces.
2020-05-10 16:05:21.457 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 16:05:21.458 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 16:05:21.526 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 63ms. Found 5 JPA repository interfaces.
2020-05-10 16:05:21.551 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 16:05:21.552 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 16:05:21.573 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:05:21.573 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:05:21.574 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:05:21.574 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:05:21.574 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:05:21.574 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-05-10 16:05:22.009 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$fb0187f2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 16:05:22.559 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 16:05:22.569 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 16:05:22.570 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 16:05:22.570 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 16:05:22.684 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 16:05:22.684 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2146 ms
2020-05-10 16:05:22.916 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 16:05:22.999 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 16:05:23.130 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 16:05:23.236 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 16:05:23.888 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 16:05:23.909 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 16:05:24.868 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 16:05:24.876 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 16:05:24.907 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 16:05:26.592 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 16:05:27.181 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 16:05:27.207 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 16:05:27.210 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.536 seconds (JVM running for 8.63)
2020-05-10 16:05:36.438 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 16:05:36.438 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 16:05:36.452 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 14 ms
2020-05-10 16:05:36.494 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$NPkkf9PvqKfQSWEP2937Y.buW9zkp1lfN0d0NjchFqJD9ayEvg4EK]}
2020-05-10 16:05:36.597 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 16:05:36.598 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 16:05:37.354 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 16:05:37.490 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:05:37.594 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:05:42.529 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:05:42.689 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$/lB5hbI0kbhSdOHUif4NqO7u6ZaxQjB.wKC..4LbFWdSW9Uwfg.je}
2020-05-10 16:05:44.232 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$/lB5hbI0kbhSdOHUif4NqO7u6ZaxQjB.wKC..4LbFWdSW9Uwfg.je]}
2020-05-10 16:05:44.260 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:05:44.648 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$/lB5hbI0kbhSdOHUif4NqO7u6ZaxQjB.wKC..4LbFWdSW9Uwfg.je]}
2020-05-10 16:05:44.651 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:05:44.651 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 16:05:44.657 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:05:44.660 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:05:44.707 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 16:05:46.391 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$/lB5hbI0kbhSdOHUif4NqO7u6ZaxQjB.wKC..4LbFWdSW9Uwfg.je]}
2020-05-10 16:05:46.399 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:05:46.745 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/types/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TypeController.types', args=[0, 5]}
2020-05-10 16:05:46.866 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Type instances
2020-05-10 16:05:47.496 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$/lB5hbI0kbhSdOHUif4NqO7u6ZaxQjB.wKC..4LbFWdSW9Uwfg.je]}
2020-05-10 16:05:47.499 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:05:47.841 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/tags/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TagController.tags', args=[0, 5]}
2020-05-10 16:05:47.853 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Tag instances
2020-05-10 16:05:49.229 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/logout', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.logout', args=[1]}
2020-05-10 16:05:49.234 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : success
2020-05-10 16:05:49.651 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:05:49.658 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:06:30.762 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 16:06:30.763 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 16:06:30.777 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:06:30.782 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 16:06:30.793 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 16:06:30.805 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 16:06:30.824 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 16:06:30.842 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 16:08:20.013 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:08:20.128 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$aKvJ9OB/2.aRDkGPXLHegOlTCRkB8Mjs9ZgDRHhioUhTMQPZRqOPe}
2020-05-10 16:08:21.646 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$aKvJ9OB/2.aRDkGPXLHegOlTCRkB8Mjs9ZgDRHhioUhTMQPZRqOPe]}
2020-05-10 16:08:21.649 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:08:22.034 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$aKvJ9OB/2.aRDkGPXLHegOlTCRkB8Mjs9ZgDRHhioUhTMQPZRqOPe]}
2020-05-10 16:08:22.034 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 16:08:22.138 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:08:22.141 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:08:22.144 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 16:08:22.152 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:08:27.065 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$aKvJ9OB/2.aRDkGPXLHegOlTCRkB8Mjs9ZgDRHhioUhTMQPZRqOPe]}
2020-05-10 16:08:27.068 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:08:27.411 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/tags/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TagController.tags', args=[0, 5]}
2020-05-10 16:08:27.417 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Tag instances
2020-05-10 16:08:29.545 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/logout', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.logout', args=[1]}
2020-05-10 16:08:29.548 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : success
2020-05-10 16:08:29.958 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:08:29.965 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:08:34.568 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:08:34.683 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$i7BIGM6WwNVdDxRsBzHYveBwNFkkyocUp.LlkGSeviLsWO/Haxp3u}
2020-05-10 16:08:36.506 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$i7BIGM6WwNVdDxRsBzHYveBwNFkkyocUp.LlkGSeviLsWO/Haxp3u]}
2020-05-10 16:08:36.509 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:08:36.756 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$i7BIGM6WwNVdDxRsBzHYveBwNFkkyocUp.LlkGSeviLsWO/Haxp3u]}
2020-05-10 16:08:36.759 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:08:36.879 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:08:36.879 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 16:08:36.884 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:08:36.887 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 16:08:39.087 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$i7BIGM6WwNVdDxRsBzHYveBwNFkkyocUp.LlkGSeviLsWO/Haxp3u]}
2020-05-10 16:08:39.090 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:08:39.437 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/types/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TypeController.types', args=[0, 5]}
2020-05-10 16:08:39.442 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Type instances
2020-05-10 16:08:40.198 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$i7BIGM6WwNVdDxRsBzHYveBwNFkkyocUp.LlkGSeviLsWO/Haxp3u]}
2020-05-10 16:08:40.201 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:08:40.549 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/tags/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TagController.tags', args=[0, 5]}
2020-05-10 16:08:40.553 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Tag instances
2020-05-10 16:08:41.633 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$i7BIGM6WwNVdDxRsBzHYveBwNFkkyocUp.LlkGSeviLsWO/Haxp3u]}
2020-05-10 16:08:41.636 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:08:41.984 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 16:08:41.991 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 16:08:43.332 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/logout', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.logout', args=[1]}
2020-05-10 16:08:43.335 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : success
2020-05-10 16:08:43.741 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:08:43.751 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:08:49.673 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:08:49.786 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$6pkbwebGWPMtH/iQN535Ve/dZYDme.eG/RCM6tGKIO.Zwizu4eWhm}
2020-05-10 16:08:51.607 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$6pkbwebGWPMtH/iQN535Ve/dZYDme.eG/RCM6tGKIO.Zwizu4eWhm]}
2020-05-10 16:08:51.613 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:08:51.859 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$6pkbwebGWPMtH/iQN535Ve/dZYDme.eG/RCM6tGKIO.Zwizu4eWhm]}
2020-05-10 16:08:51.862 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:08:51.988 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 16:08:51.991 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:08:51.996 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 16:08:51.996 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:09:28.415 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/logout', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.logout', args=[1]}
2020-05-10 16:09:28.418 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : success
2020-05-10 16:09:28.666 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:09:28.671 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:16:38.348 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/tags', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTags', args=[]}
2020-05-10 16:16:38.352 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/recommendBlog', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iRecommendBlog', args=[]}
2020-05-10 16:16:38.352 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 5]}
2020-05-10 16:16:38.354 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : [IBlogRecommendVo(id=11, title=123gg), IBlogRecommendVo(id=14, title=哈哈), IBlogRecommendVo(id=13, title=奇怪)]
2020-05-10 16:16:38.359 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:16:38.351 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [Tag(id=2, name=SpringBoot, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Tag(id=3, name=MySQL, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=4, name=Oracle, blogs=[Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788), Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Tag(id=1, name=Vue, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Tag(id=5, name=Node, blogs=[Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325)]), Tag(id=6, name=Spring, blogs=[]), Tag(id=7, name=MyBatis, blogs=[]), Tag(id=8, name=Spring Data Jpa, blogs=[]), Tag(id=9, name=Java, blogs=[])]
2020-05-10 16:16:38.383 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/types', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.iTypes', args=[]}
2020-05-10 16:16:38.390 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 16:22:59.867 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 28832 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 16:22:59.870 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 16:23:00.078 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 16:23:00.079 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 16:23:00.079 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 16:23:02.572 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 16:23:02.573 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 16:23:02.744 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:23:02.746 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:23:02.770 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:23:02.787 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:23:02.791 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:23:02.794 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 215ms. Found 0 JDBC repository interfaces.
2020-05-10 16:23:02.827 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 16:23:02.827 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 16:23:03.060 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 219ms. Found 5 JPA repository interfaces.
2020-05-10 16:23:03.079 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 16:23:03.080 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 16:23:03.104 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:23:03.104 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:23:03.104 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:23:03.105 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:23:03.105 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:23:03.105 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-05-10 16:23:03.659 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$45e0fbb0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 16:23:04.363 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 16:23:04.373 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 16:23:04.374 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 16:23:04.374 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 16:23:04.520 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 16:23:04.520 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 4441 ms
2020-05-10 16:23:04.872 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 16:23:05.105 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 16:23:05.670 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 16:23:05.878 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 16:23:06.590 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 16:23:06.768 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 16:23:08.415 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 16:23:08.422 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 16:23:08.452 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 16:23:10.331 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 16:23:10.913 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 16:23:10.958 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 16:23:10.960 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 11.813 seconds (JVM running for 12.999)
2020-05-10 16:23:24.317 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 16:23:24.317 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 16:23:24.336 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 18 ms
2020-05-10 16:23:24.483 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:23:24.835 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 16:23:24.836 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 16:23:25.821 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$kWJq92oBP5OguVaoYnI6NOSJpoS0TK8qGBc2w7Z3uuLnekj/GM.a6}
2020-05-10 16:23:27.384 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$kWJq92oBP5OguVaoYnI6NOSJpoS0TK8qGBc2w7Z3uuLnekj/GM.a6]}
2020-05-10 16:23:27.417 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:23:27.834 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$kWJq92oBP5OguVaoYnI6NOSJpoS0TK8qGBc2w7Z3uuLnekj/GM.a6]}
2020-05-10 16:23:27.837 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:23:27.847 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 16:23:27.848 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:23:28.169 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:23:28.184 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 16:24:07.308 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$kWJq92oBP5OguVaoYnI6NOSJpoS0TK8qGBc2w7Z3uuLnekj/GM.a6]}
2020-05-10 16:24:07.311 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:24:07.560 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/types/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TypeController.types', args=[0, 5]}
2020-05-10 16:24:07.599 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Type instances
2020-05-10 16:24:17.141 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$kWJq92oBP5OguVaoYnI6NOSJpoS0TK8qGBc2w7Z3uuLnekj/GM.a6]}
2020-05-10 16:24:17.144 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:24:17.391 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/tags/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.TagController.tags', args=[0, 5]}
2020-05-10 16:24:17.404 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.domain.Tag instances
2020-05-10 16:28:11.130 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-QJF9UQM with PID 31848 (E:\IDEA\myblog\target\classes started by ss in E:\IDEA\myblog)
2020-05-10 16:28:11.134 [restartedMain] INFO  com.cb.myblog.MyblogApplication - The following profiles are active: dev
2020-05-10 16:28:11.202 [restartedMain] INFO  o.s.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in E:\maven_repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/E:/maven_repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-05-10 16:28:11.207 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-10 16:28:11.207 [restartedMain] INFO  o.s.b.d.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-10 16:28:11.980 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 16:28:11.980 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-10 16:28:12.031 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:28:12.033 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:28:12.034 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:28:12.035 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:28:12.037 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2020-05-10 16:28:12.037 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52ms. Found 0 JDBC repository interfaces.
2020-05-10 16:28:12.053 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 16:28:12.053 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-05-10 16:28:12.118 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 61ms. Found 5 JPA repository interfaces.
2020-05-10 16:28:12.134 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-10 16:28:12.135 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-10 16:28:12.155 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IBlogDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:28:12.155 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ICommentDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:28:12.155 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITagDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:28:12.156 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.ITypeDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:28:12.157 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.cb.myblog.repository.IUserDao. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-05-10 16:28:12.157 [restartedMain] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-05-10 16:28:12.646 [restartedMain] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'myRedisConfig' of type [com.cb.myblog.config.MyRedisConfig$$EnhancerBySpringCGLIB$$325aac58] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-10 16:28:13.174 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2020-05-10 16:28:13.183 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2020-05-10 16:28:13.184 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-10 16:28:13.184 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-10 16:28:13.304 [restartedMain] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring embedded WebApplicationContext
2020-05-10 16:28:13.304 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2097 ms
2020-05-10 16:28:13.530 [restartedMain] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-05-10 16:28:13.603 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.4.12.Final
2020-05-10 16:28:13.736 [restartedMain] INFO  org.hibernate.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-05-10 16:28:13.834 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2020-05-10 16:28:14.465 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2020-05-10 16:28:14.483 [restartedMain] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-05-10 16:28:15.430 [restartedMain] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-05-10 16:28:15.437 [restartedMain] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-10 16:28:15.467 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-10 16:28:17.018 [restartedMain] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-10 16:28:17.624 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2020-05-10 16:28:17.649 [restartedMain] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/blog'
2020-05-10 16:28:17.652 [restartedMain] INFO  com.cb.myblog.MyblogApplication - Started MyblogApplication in 7.374 seconds (JVM running for 8.49)
2020-05-10 16:28:25.768 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/blog] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-10 16:28:25.768 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-10 16:28:25.783 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 14 ms
2020-05-10 16:28:25.821 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$kWJq92oBP5OguVaoYnI6NOSJpoS0TK8qGBc2w7Z3uuLnekj/GM.a6]}
2020-05-10 16:28:25.923 [http-nio-8080-exec-1] INFO  io.lettuce.core.EpollProvider - Starting without optional epoll library
2020-05-10 16:28:25.924 [http-nio-8080-exec-1] INFO  io.lettuce.core.KqueueProvider - Starting without optional kqueue library
2020-05-10 16:28:26.726 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 16:28:26.841 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:28:26.952 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:28:36.311 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:28:36.553 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$F8whCQ4tDDOuv8iDpB8lGe8rvU5cCTauww/6p5YCDnk9Uf9FmUWVe}
2020-05-10 16:28:38.081 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$F8whCQ4tDDOuv8iDpB8lGe8rvU5cCTauww/6p5YCDnk9Uf9FmUWVe]}
2020-05-10 16:28:38.117 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:28:38.620 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$F8whCQ4tDDOuv8iDpB8lGe8rvU5cCTauww/6p5YCDnk9Uf9FmUWVe]}
2020-05-10 16:28:38.624 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:28:38.626 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:28:38.627 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 16:28:38.635 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:28:38.675 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 16:28:55.554 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$F8whCQ4tDDOuv8iDpB8lGe8rvU5cCTauww/6p5YCDnk9Uf9FmUWVe]}
2020-05-10 16:28:55.556 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 16:28:55.838 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:28:55.845 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:29:05.809 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:29:05.926 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$738OZAelnoRLtT8PG.dJweiawSWLV0mndLMoZk.SSzyBdh1lOFdoe}
2020-05-10 16:29:07.450 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$738OZAelnoRLtT8PG.dJweiawSWLV0mndLMoZk.SSzyBdh1lOFdoe]}
2020-05-10 16:29:07.453 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:29:07.837 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$738OZAelnoRLtT8PG.dJweiawSWLV0mndLMoZk.SSzyBdh1lOFdoe]}
2020-05-10 16:29:07.837 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 16:29:07.839 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:29:07.839 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:29:07.846 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 16:29:07.846 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:30:21.335 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$738OZAelnoRLtT8PG.dJweiawSWLV0mndLMoZk.SSzyBdh1lOFdoe]}
2020-05-10 16:30:21.336 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : null
2020-05-10 16:30:21.587 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:30:21.597 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:32:41.078 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:32:41.092 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:35:37.065 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=11231, password=1, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:35:37.071 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=error}
2020-05-10 16:36:20.175 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:36:20.185 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:36:24.976 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=1241241, password=1, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:36:24.978 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=error}
2020-05-10 16:36:27.451 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=1241241, password=1, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:36:27.453 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=error}
2020-05-10 16:36:31.516 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=1241241, password=1342, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:36:31.520 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=error}
2020-05-10 16:36:38.122 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=admin, password=123, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:36:38.235 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=success, id=1, token=$2a$10$GPNZXeElGuixc1hl/WiUv.jB1KS5PKu4AdKp8ASHaw/Q/OHYlpFyC}
2020-05-10 16:36:39.755 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$GPNZXeElGuixc1hl/WiUv.jB1KS5PKu4AdKp8ASHaw/Q/OHYlpFyC]}
2020-05-10 16:36:39.758 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:36:40.367 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/currentUser', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.checkMode', args=[1, $2a$10$GPNZXeElGuixc1hl/WiUv.jB1KS5PKu4AdKp8ASHaw/Q/OHYlpFyC]}
2020-05-10 16:36:40.370 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : User(id=1, nickname=Cebb, username=admin, password=null, email=123@qq, avatar=https://unsplash.it/100/100?image=1005, type=null, createTime=2020-04-05 10:19:37.0, updateTime=2020-04-05 10:19:43.0)
2020-05-10 16:36:40.373 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:36:40.374 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/blogs/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.BlogController.blogsAll', args=[0, 5]}
2020-05-10 16:36:40.380 [http-nio-8080-exec-8] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:36:40.382 [http-nio-8080-exec-4] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.domain.Blog instances
2020-05-10 16:36:43.754 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/logout', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.logout', args=[1]}
2020-05-10 16:36:43.762 [http-nio-8080-exec-6] INFO  com.cb.myblog.aspect.LogAspect - Result : success
2020-05-10 16:36:43.902 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/blogs/0/3', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.IndexController.blogsAll', args=[0, 3]}
2020-05-10 16:36:43.912 [http-nio-8080-exec-9] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 2 containing com.cb.myblog.vo.IBlogSimpleVo instances
2020-05-10 16:39:03.124 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=wqweq, password=1232, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:39:03.130 [http-nio-8080-exec-10] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=error}
2020-05-10 16:39:06.183 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=wqweq, password=1232, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:39:06.187 [http-nio-8080-exec-1] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=error}
2020-05-10 16:39:06.613 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=wqweq, password=1232, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:39:06.615 [http-nio-8080-exec-2] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=error}
2020-05-10 16:39:07.636 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/admin/login', ip='127.0.0.1', classMethod='com.cb.myblog.controller.admin.LoginController.login', args=[User(id=null, nickname=null, username=wqweq, password=1232, email=null, avatar=null, type=null, createTime=null, updateTime=null)]}
2020-05-10 16:39:07.638 [http-nio-8080-exec-3] INFO  com.cb.myblog.aspect.LogAspect - Result : {msg=error}
2020-05-10 16:40:25.840 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classify', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.typeAll', args=[]}
2020-05-10 16:40:25.854 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Request : RequestLog{url='http://localhost:8080/blog/user/classifyBlog/2/0/5', ip='127.0.0.1', classMethod='com.cb.myblog.controller.user.TypeDetailsController.findBlogByTypeId', args=[2, 0, 5]}
2020-05-10 16:40:25.854 [http-nio-8080-exec-7] INFO  com.cb.myblog.aspect.LogAspect - Result : [Type(id=1, name=随笔, blogs=[Blog(id=11, title=123gg, description=123123, content=# 标题？, firstPicture=https://unsplash.it/800/450?image=1005, flag=true, views=3, commentNum=0, likes=5, createTime=2020-04-11 20:43:55.0, updateTime=2020-04-21 12:12:25.806)]), Type(id=2, name=编程, blogs=[Blog(id=7, title=博客搭建总结, description=博主一直是通过视频自学的编程。通过视频学习编程的好处很明显，“选择多、体系清晰、上手快”。缺点也很明显，“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站, content=## 一、前言

### **1.1 为什么想要搭建这个博客？**

我是一名大三的学生。因为各种原因在学校的 JavaWeb 课上学不进去，只能自己在<a href='https://www.bilibili.com/'> B站 </a>等各类视频网站上学习编程。通过视频学习编程的好处很明显，**“选择多、体系清晰、上手快”**。缺点也很明显，**“出了问题自己解决、学习流程可能不够适合自己、一昧的沿着知识体系学习而没有整合实战，等到了实战时无从下手”**。所以，为了弥补没有整合知识体系的缺点，我搭建了这个个人博客网站。

```java
    /**
     * 推荐博客中，按照时间进行排序
     */
    @Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
    @Override
    public List<IBlogRecommendVo> listRecommendBlogTop(Integer size) {
        Sort sort = Sort.by(Sort.Direction.DESC,"updateTime");
        PageRequest pageRequest = PageRequest.of(0, size, sort);

        return blogDao.findTop(pageRequest);
    }
```

## 二、从中有什么收获？

> 使用到的框架工具：
>
> ​前端：ElementUI + SemanticUI + Vue
> ​</br>后端：SpringBoot + Spring Data Jpa + Redis
> ​</br>服务端：阿里云ESC + Nginx + Docker

- 对于前后端分离开发有了更深的理解。

- 对于 `es6` 和 `Vue` 从一无所知，到可以写一个简单的博客网站。

- `ElementUI` 和 `SemanticUI` 的结合使用搭建网站界面。

- 从 “ 不爱看官网 ” 到 “ 有问题先上官网 ” ....

- 更加理解了 “日志” 的重要性。

- 对于 `Tomcat` 的配置理解更加清晰了。

- 后端开发中出现的各种小问题，从 “发现” 到 “解决” ，学习了很多。

- `Spring Data Jpa` 于实战中的使用。

- 云服务器的环境搭建 + `Nginx` 的配置和使用 + `Docker` 的意义和使用。

  

## 三、页面展示

![76417652_p0.jpg](http://39.97.237.163:80/blog/upload/2020/04/14/8f4b69ab-7754-467c-b6e1-6061470e5591.jpg)
……（后续更新）



## 四、项目需求

### 4.1 项目背景

对于没有任何实战经验的小白来说，急需更佳清晰的认识开发的整套体系，所以我选择了 Vue + Spring Boot 的前后端分离方式开发这个博客网站。



### 4.2功能需求

- 文章管理
- 分类管理
- 标签管理
- 管理员登录
- 日志记录



### 4.3安装部署需求

- MySQL 和 Redis 在服务器中的 Docker 进行配置。
- 前后端项目则分开放在服务器中的两个 Tomcat 。
- Nginx 进行端口监听，再将请求转发至前后端。



### 4.4 非功能需求

- 首页加载不超过 3 秒（目前只能压缩到 4.5 秒，有空再说吧）



## 五、项目设计

### 5.1 总体设计

#### 本项目用到的技术和框架

1. 项目构建：Maven
2. web框架：Spring Boot
3. 数据库ORM：Spring Data Jpa
4. 数据库连接池：HikariDataSource
5. 数据库：MySql
6. 缓存：Redis
7. 前端框架：Vue
8. 文章展示：Highlight.js + Marked.js + Mavon-Editor
9. 反向代理：Nginx



#### 本项目中的关键点

1. 采用 `Spring Boot` 开发，数据库使用连接池加 `orm` 框架的模式，对于系统的关键业务使用 `Redis` 缓存，加快相应速度（还有很多地方可以使用 `Redis `，后续可能会继续优化）。
2. 整体系统采用门户网站+后台管理的方式搭建，门户网站展示博客内容以及博主介绍，后台管理用于编辑文章和分类标签管理。
3. 使用阿里云OSS进行静态资源存储，以及CDN全站加速。（暂未完成）

#### 环境

| 工具     | 名称                   |
| -------- | ---------------------- |
| 开发工具 | IDEA                   |
| 语言     | JDK 1.8、HTML、CSS、JS |
| 数据库   | MySQL 5.7              |
| 项目框架 | Spring Boot、Vue       |
| ORM      | Spring Data Jpa        |
| 反向代理 | Nginx                  |
| 缓存     | Redis                  |
| 项目构建 | Maven                  |
| 运行环境 | 阿里云ECS              |



## 六、开发流程

### 6.1 数据库CRUD

- Controller 层中接收前端数据。

- Service 层进行数据的业务处理。
- Dao 层依照 Service 层的需求进行数据库 CRUD。
- Vo 类根据业务需求对数据进行映射处理。
- 事务由 `@Transactional` 注解进行处理。



### 6.2 页面与展示

- 页面样式主要依靠 `SemanticUI` 进行设计。对于需要数据渲染的某些样式，使用了和 `Vue` 非常契合的 `ElementUI` 进行设计，例如分页。

- 因为页面中用到了少量的 `SemanticUI` 中的动画效果，所以在项目中引入了 `Jquery`。
- 前端通过 `Vue` 中的 `axios` 与后端进行异步交互，再将接收到的数据进行处理后，对页面进行渲染。
- 对于博客详情页的 `Markdown` 语法解析，使用了 `Highlight.js` 和 `Marked.js` 。在管理页的新增博客中，使用了 `Mavon-Editor` 来支持管理页的博客编辑。
- 路由跳转则是 `Vue` 中的 `vue-router`。



### 6.3 网站建设

- 使用 `Nginx` 进行端口监听，然后将请求代理到前端端口。

- 服务器选用阿里云ESC。
- 域名则是阿里上购买的.top域名。
- 网站备案和公安机关备案，按照阿里云APP中的提示一步步做下去即可。（目前我的域名还在备案过程中...



## 七、总结

### 7.1 开发中遇到的难点

> 由于对于 `Vue` 的认知不够完善，在项目过程中不断碰壁，出现过的问题主要有以下几点。

- 点击按钮跳转到固定组件位置后，url地址栏发生变化，此时刷新页面会跳转到404页面。

- 管理页和游客页的两套模板样式在单页中进行切换出现问题。
- 目录插件的整合出现问题（实际上是文章中标题过长导致...）。
- 评论区无法单独展开查看回复模块（实际上是对于 `Vue` 的动态监听数组的认知不全面）。
- 管理页中在 Markdown 编辑器中进行图片上传。
- `Spring Data Jpa` 中查询数据时只查询部分字段时报错，对于 Vo 类中数据类型不吻合。
- `Spring Data Jpa` 中出现栈溢出的错误（查询时由于两个实体互相包含，变成死循环）。
- 最让我痛苦的问题：Vue 项目打包前使用 `localhost` 或者 `127.0.0.1` 或者 `局域网IP` 都可以正常访问项目。但打包后，使用 `局域网IP` 进行访问时会出现 `SCRIPT1002` 语法报错。查看错误位置是 `Jquery` 中的类选择器出现的错误。翻遍了百度、谷歌、Vue的论坛，只找到了两三个相同情况的问题，但都没有解决方案。思考可能是 `Jquery` 和 `Vue` 的兼容问题（若有知道问题答案的欢迎在评论区进行讨论）。【最终换了个思路避开了这个问题。
- 前端项目在 `360浏览器` 中出现兼容问题。（未解决...）

**以上是在项目中出现的困扰过我一段时间的问题，其中大部分问题都成功的解决了，最后的兼容问题暂时没有心力去解决，或许以后会去优化。**



### 7.2 博客网站的优缺点

**缺点：**

- 对于用户登录没有进行设计

- 没有单独的游客留言页面
- 代码冗余问题，导致首页加载慢
- `Redis` 使用太少，还有非常大的优化空间。但考虑到时间成本，暂时没去优化。
- 后端代码中由于开始没有经验，导致冗余不少，不利于阅读。后面慢慢进步导致风格出现变化，结果似乎更不利于阅读了 ( ﾟ∀ﾟ) ?



### 7.3 项目整体优化

- 首页加载问题已经从最开始的完全没有优化 20s（离谱），到现在的 4.5s，后续的优化点应该就是代码冗余的问题。【要不然就是升级服务器带宽 (｡∀ﾟ)

- 后端中还有非常多的地方可以使用 `Redis` ，但暂时没有优化。
- 用户权限问题需要优化。



### 7.4 未来需增加的功能

- 留言
- 用户登录

（有生之年...?）



#### *以上就是我在博客网站搭建过程后的所有总结记录，可能会有遗缺部分，等以后想起来了再来修改吧。*, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=59, commentNum=0, likes=0, createTime=2020-04-02 21:06:47.451, updateTime=2020-04-02 21:06:47.451), Blog(id=8, title=123123, description=12321123, content=12312213123, firstPicture=https://unsplash.it/800/450?image=1005, flag=false, views=15, commentNum=0, likes=0, createTime=2020-04-02 21:07:10.325, updateTime=2020-04-02 21:07:10.325), Blog(id=13, title=奇怪, description=啊实打实大, content=哈哈哈哈哈
# 标题1, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=9, commentNum=3, likes=18, createTime=2020-05-07 19:59:17.0, updateTime=2020-04-20 19:59:17.788)]), Type(id=3, name=学习, blogs=[Blog(id=14, title=哈哈, description=弟弟, content=方方方, firstPicture=https://unsplash.it/800/450?image=1079, flag=true, views=1, commentNum=0, likes=11, createTime=2020-04-21 09:58:03.804, updateTime=2020-04-21 09:58:03.804)]), Type(id=4, name=日常, blogs=[]), Type(id=5, name=游戏, blogs=[]), Type(id=6, name=科技, blogs=[])]
2020-05-10 16:40:25.876 [http-nio-8080-exec-5] INFO  com.cb.myblog.aspect.LogAspect - Result : Page 1 of 1 containing com.cb.myblog.vo.IBlogSimpleVo instances
